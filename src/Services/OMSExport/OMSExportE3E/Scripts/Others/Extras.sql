/*NOTES 
	IF SECURITY IS INSTALLED TRIGGER SCHEMA'S MAY NEED TO BE ADJUSTED
*/



--ADD COLUMN USED TO STORE ENTITY ID FROM E3E - WILL PUT FORWARD FOR INCLUSION IN CORE
EXEC FWBSADDCOLUMN 
	@TABLENAME = 'dbContact' 
	, @COLUMNNAME = 'contExtID'
	, @COLUMNDESC = 'INT NULL'

--ADD COLUMN USED TO STORE ENTITY ID FROM E3E - WILL PUT FORWARD FOR INCLUSION IN CORE
EXEC FWBSADDCOLUMN 
	@TABLENAME = 'dbContact' 
	, @COLUMNNAME = 'contNeedExport' --NEED A TRIGGER FOR THIS FROM DBCONTACT AND RELATED TABLES!
	, @COLUMNDESC = 'BIT NULL DEFAULT ( 1 )' --CHECK THIS FOR REPLICATION!
	
GO

--NEW COLUMNS FOR 3E PHASE, TASK AND ACTIVITY CODE
EXEC FWBSADDCOLUMN 
	@TABLENAME = 'dbTimeLedger' 
	, @COLUMNNAME = 'E3E_PHASECODE'
	, @COLUMNDESC = 'VARCHAR ( 10 ) NULL'
EXEC FWBSADDCOLUMN 
	@TABLENAME = 'dbTimeLedger' 
	, @COLUMNNAME = 'E3E_TASKCODE'
	, @COLUMNDESC = 'VARCHAR ( 10 ) NULL'
EXEC FWBSADDCOLUMN 
	@TABLENAME = 'dbTimeLedger' 
	, @COLUMNNAME = 'E3E_ACTIVITYCODE'
	, @COLUMNDESC = 'VARCHAR ( 10 ) NULL'

EXEC FWBSCOLUMNCHANGES 
	@SPTABLE = 'FDEXPORTSERVICELOG' 
	, @SPCOLUMN = 'ErrorMessage' 
	, @SPDEFINITION = 'NVARCHAR ( MAX )'
GO

IF  EXISTS (SELECT * FROM sys.triggers WHERE object_id = OBJECT_ID(N'[dbo].[tgrExportContactToAccounts]'))
DROP TRIGGER [dbo].[tgrExportContactToAccounts]
GO

--TRIGGER NO LONGER REQUIRED - EDITING CONTACTINDIVIDUAL IN MATTERCENTRE UPDATES THROUGH EXTENDED DATA LAYER UPDATES CONTACT RECORD
IF  EXISTS (SELECT * FROM sys.triggers WHERE object_id = OBJECT_ID(N'[dbo].[tgrExportContactIndividualToAccounts]'))
DROP TRIGGER [dbo].[tgrExportContactIndividualToAccounts]
GO
--TRIGGER NO LONGER REQUIRED - EDITING CONTACTCOMPANY IN MATTERCENTRE UPDATES CONTACT THROUGH EXTENDED DATA LAYER UPDATES CONTACT RECORD
IF  EXISTS (SELECT * FROM sys.triggers WHERE object_id = OBJECT_ID(N'[dbo].[tgrExportContactCompanyToAccounts]'))
DROP TRIGGER [dbo].[tgrExportContactCompanyToAccounts]
GO

CREATE TRIGGER [dbo].[tgrExportContactToAccounts] ON [dbo].[dbContact]
FOR UPDATE  NOT FOR REPLICATION
AS
if not update(contneedexport)
begin
	update dbContact set contNeedExport = 1 where contID in (select contID from inserted)
end
GO

--USED IF UPDATES NEEDED TO FLAG EFFECTIVE DATE UPDATES REQUIRED
EXEC FWBSADDCOLUMN 
	@TABLENAME = 'dbFile' 
	, @COLUMNNAME = 'fileE3EEffectiveDatedNeedUpdate' 
	, @COLUMNDESC = 'BIT NOT NULL DEFAULT ( 0 )'
GO

EXEC FWBSADDCOLUMN 
	@TABLENAME = 'dbClient' 
	, @COLUMNNAME = 'clE3EEffectiveDatedNeedUpdate' 
	, @COLUMNDESC = 'BIT NOT NULL DEFAULT ( 0 )'
GO

--FILE TABLE

IF  EXISTS (SELECT * FROM sys.triggers WHERE object_id = OBJECT_ID(N'[dbo].[tgrFileE3EEffectiveDatedNeedUpdate]'))
	DROP TRIGGER [dbo].[tgrFileE3EEffectiveDatedNeedUpdate]
GO

CREATE TRIGGER [dbo].[tgrFileE3EEffectiveDatedNeedUpdate] ON [dbo].[dbFile]
FOR UPDATE NOT FOR REPLICATION
AS
	/*
		TRIGGER TO HANDLE KNOWN COLUMNS NEEDED TO BE EXPORTED FOR EFFECTIVEDATED INFORMATION
		SOME CHECKS ARE PERFORMED TO PREVENT ADJUSTING TGREXPORTFILETOACCOUNTS TRIGGER FOR NESTED TRIGGERS
		SINGLE ROW UPDATES HANDLED ONLY
	*/
	
	DECLARE @ROWCOUNT INT
	SELECT @ROWCOUNT = COUNT(*) FROM INSERTED
	
	IF @ROWCOUNT = 1
	BEGIN
		IF UPDATE ( BRID ) OR UPDATE ( FILEPRINCIPLEID ) OR UPDATE ( FILEDEPARTMENT ) OR UPDATE ( FILERESPONSIBLEID )--PERFORM UPDATE FOR COLUMNS NEEDED TO FLAG FOR EFFECTIVE DATE UPDATE
			UPDATE DBFILE SET FILEE3EEFFECTIVEDATEDNEEDUPDATE = 1 WHERE FILEID IN ( SELECT FILEID FROM INSERTED )

		--IF FILENEEDEXPORT IS UPDATED, CHECK THE RESULT
		IF UPDATE ( FILENEEDEXPORT ) 
		BEGIN
			DECLARE @FILENEEDEXPORT BIT
		
			SELECT @FILENEEDEXPORT = FILENEEDEXPORT FROM INSERTED
			IF @FILENEEDEXPORT = 0 
			BEGIN
				UPDATE 
					DBFILE 
				SET 
					FILEE3EEFFECTIVEDATEDNEEDUPDATE = 0 
					, DBFILE.FILENEEDEXPORT = DBFILE.FILENEEDEXPORT --SET THIS TO PREVENT OTHER TRIGGER FIRING
				FROM 
					DBFILE 
				INNER JOIN 
					INSERTED ON INSERTED.FILEID = DBFILE.FILEID 
				WHERE 
					INSERTED.FILENEEDEXPORT = 0
			END 
		END 
	END
GO

--CLIENT TABLE

IF  EXISTS (SELECT * FROM sys.triggers WHERE object_id = OBJECT_ID(N'[dbo].[tgrClientE3EEffectiveDatedNeedUpdate]'))
	DROP TRIGGER [dbo].[tgrClientE3EEffectiveDatedNeedUpdate]
GO

CREATE TRIGGER [DBO].tgrClientE3EEffectiveDatedNeedUpdate ON DBO.DBCLIENT
FOR UPDATE NOT FOR REPLICATION
AS
	/*
		TRIGGER TO HANDLE KNOWN COLUMNS NEEDED TO BE EXPORTED FOR EFFECTIVEDATED INFORMATION
		SOME CHECKS ARE PERFORMED TO PREVENT ADJUSTING TGREXPORTCLIENTTOACCOUNTS TRIGGER FOR NESTED TRIGGERS
		SINGLE ROW UPDATES HANDLED ONLY
	*/
	
	DECLARE @ROWCOUNT INT
	SELECT @ROWCOUNT = COUNT(*) FROM INSERTED
	
	IF @ROWCOUNT = 1
	BEGIN
		IF UPDATE ( BRID ) 
			UPDATE DBCLIENT SET CLE3EEFFECTIVEDATEDNEEDUPDATE = 1 WHERE CLID IN ( SELECT CLID FROM INSERTED )

		--IF CLNEEDEXPORT IS UPDATED, CHECK THE RESULT
		IF UPDATE ( CLNEEDEXPORT ) 
		BEGIN
			DECLARE @CLNEEDEXPORT BIT
			
			SELECT @CLNEEDEXPORT = CLNEEDEXPORT FROM INSERTED
			IF @CLNEEDEXPORT = 0 
			BEGIN
				UPDATE 
					DBCLIENT 
				SET 
					CLE3EEFFECTIVEDATEDNEEDUPDATE = 0 
					, DBCLIENT.CLNEEDEXPORT = DBCLIENT.CLNEEDEXPORT --SET THIS TO PREVENT OTHER TRIGGER FIRING
				FROM 
					DBCLIENT 
				INNER JOIN 
					INSERTED ON INSERTED.CLID = DBCLIENT.CLID 
				WHERE 
					INSERTED.CLNEEDEXPORT = 0
			END 
		END 
	END 
GO



/****** Object:  UserDefinedFunction [dbo].[GetHtmlEncode]    Script Date: 05/15/2013 14:49:05 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[GetHtmlEncode]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
DROP FUNCTION [dbo].[GetHtmlEncode]
GO

--ONLY CREATE - AS MAY BE ROLLED INTO CORE DATABASE AND COULD CHANGE IN FUTURE SO WILL ERROR IF ALREADY EXISTS - CREATE FUNCTION HAS TO BE FIRST STATEMENT IN BATCH - RUN UN-COMMENTED IF NEEDED
CREATE FUNCTION [dbo].[GetHtmlEncode] ( @VALUE NVARCHAR ( MAX ) , @PRESERVENEWLINE BIT = 0 )
RETURNS NVARCHAR ( MAX )
AS
BEGIN
	DECLARE @RESULT NVARCHAR ( MAX )
	SET @RESULT = @VALUE
	IF @RESULT IS NOT NULL AND LEN ( @RESULT ) > 0
	BEGIN
	SET @RESULT = REPLACE ( @RESULT , N'&', N'&amp;')
	SET @RESULT = REPLACE ( @RESULT , N'<', N'<')
	SET @RESULT = REPLACE ( @RESULT , N'>', N'>')
	SET @RESULT = REPLACE ( @RESULT , N'''', N'&#39;')
	SET @RESULT = REPLACE ( @RESULT , N'"', N'&quot;')
	IF @PRESERVENEWLINE = 1
		SET @RESULT = REPLACE( @RESULT , CHAR(10) , CHAR(10) + N'<br>')
	END
	RETURN @RESULT
END
GO



-- EXTRA COLUMNS ADDED TO DBTIMELEDGER
EXEC FWBSADDCOLUMN --COLUMN TO STORE LOCAL RECORDED DATE TIME IN - POPULATED IN SCRIPTING ON TIME SCREEN WHERE USED IF NEEDED FOR MULTI-OFFICE SCENARIOS IN DIFFERENT TIME ZONES - TEXT FIELD SO DOES NOT GET TRANSLATED TO UTC AGAIN - NVARCHAR AS LOWEST SQL PLATFORM IS SQL 2005
@TABLENAME = 'dbTimeLedger'
, @COLUMNNAME = 'timeRecorded_Actual'
, @COLUMNDESC = 'datetime NULL'

EXEC FWBSADDCOLUMN --COLUMN TO STORE LOCAL RECORDED TIME ZONE - POPULATED IN SCRIPTING ON TIME SCREEN WHERE USED IF NEEDED FOR MULTI-OFFICE SCENARIOS IN DIFFERENT TIME ZONES - TEXT FIELD SO DOES NOT GET TRANSLATED TO UTC AGAIN - NVARCHAR AS LOWEST SQL PLATFORM IS SQL 2005
@TABLENAME = 'dbTimeLedger'
, @COLUMNNAME = 'timeRecorded_tz'
, @COLUMNDESC = 'NVARCHAR ( 100 )'


--ASSOCIATES UPDATES JULY 2014
--DBASSOCIATETYPE
EXEC fwbsAddColumn 
	@Tablename = 'dbAssociateType'
	, @ColumnName = 'typeAccCode'
	, @columnDesc = 'NVARCHAR ( 64 ) NULL'
GO
EXEC fwbsAddColumn 
	@Tablename = 'dbAssociateType'
	, @ColumnName = 'typeAccRelationshipCode'
	, @columnDesc = 'NVARCHAR ( 64 ) NULL'
GO
--DBASSOCIATES

EXEC fwbsAddColumn 
 @Tablename = 'dbAssociates'
 , @ColumnName = 'assocExtTxtID'
 , @columnDesc = 'NVARCHAR ( 36 ) NULL' --ALLOW NULL AS THIS CAUSES ISSUES WITH REPLICATION
GO

EXEC FWBSADDCOLUMN
@TABLENAME = 'DBFINANCIALLEDGER'
, @COLUMNNAME = 'finExtID'
, @COLUMNDESC = 'INT NULL'

