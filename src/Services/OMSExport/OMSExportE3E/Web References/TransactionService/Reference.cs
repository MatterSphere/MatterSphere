//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.239
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.239.
// 
#pragma warning disable 1591

namespace FWBS.TransactionService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="TransactionServiceSoap", Namespace="http://tempuri.org//ServiceExecuteProcess")]
    public partial class TransactionService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback ExposeEnumOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExecuteProcessOperationCompleted;
        
        private System.Threading.SendOrPostCallback CancelAllOpenProcessesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetArchetypeDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMetricDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetNamedMetricDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetArchetypeDataSQLOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMetricDataSQLOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetNamedMetricDataSQLOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDataFromReportLayoutOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDataFromReportLayoutCrystalOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSyncIdsOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckFileHashOperationCompleted;
        
        private System.Threading.SendOrPostCallback PingOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendAttachmentChunkOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendAttachmentOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetQueryResultsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetActionsListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDataFromArchetypesOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateSyncItemTagOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetOutOfSyncItemsOperationCompleted;
        
        private System.Threading.SendOrPostCallback DoSpellCheckOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateModelOperationCompleted;
        
        private System.Threading.SendOrPostCallback EditModelOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMappedItemOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetOneNoteMapOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBusinessObjectMethodsOperationCompleted;
        
        private System.Threading.SendOrPostCallback StartProcessWithDefaultsOperationCompleted;
        
        private System.Threading.SendOrPostCallback TEST_GetDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback TEST_GetDataFromReportLayoutOperationCompleted;
        
        private System.Threading.SendOrPostCallback BuildFromClientXMLOperationCompleted;
        
        private System.Threading.SendOrPostCallback ImageConnectDeleteOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetOptionOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public TransactionService() {
            this.Url = global::FWBS.Properties.Settings.Default.OMSExportE3E_TransactionService_TransactionService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event ExposeEnumCompletedEventHandler ExposeEnumCompleted;
        
        /// <remarks/>
        public event ExecuteProcessCompletedEventHandler ExecuteProcessCompleted;
        
        /// <remarks/>
        public event CancelAllOpenProcessesCompletedEventHandler CancelAllOpenProcessesCompleted;
        
        /// <remarks/>
        public event GetArchetypeDataCompletedEventHandler GetArchetypeDataCompleted;
        
        /// <remarks/>
        public event GetMetricDataCompletedEventHandler GetMetricDataCompleted;
        
        /// <remarks/>
        public event GetNamedMetricDataCompletedEventHandler GetNamedMetricDataCompleted;
        
        /// <remarks/>
        public event GetArchetypeDataSQLCompletedEventHandler GetArchetypeDataSQLCompleted;
        
        /// <remarks/>
        public event GetMetricDataSQLCompletedEventHandler GetMetricDataSQLCompleted;
        
        /// <remarks/>
        public event GetNamedMetricDataSQLCompletedEventHandler GetNamedMetricDataSQLCompleted;
        
        /// <remarks/>
        public event GetDataCompletedEventHandler GetDataCompleted;
        
        /// <remarks/>
        public event GetDataFromReportLayoutCompletedEventHandler GetDataFromReportLayoutCompleted;
        
        /// <remarks/>
        public event GetDataFromReportLayoutCrystalCompletedEventHandler GetDataFromReportLayoutCrystalCompleted;
        
        /// <remarks/>
        public event GetSyncIdsCompletedEventHandler GetSyncIdsCompleted;
        
        /// <remarks/>
        public event CheckFileHashCompletedEventHandler CheckFileHashCompleted;
        
        /// <remarks/>
        public event PingCompletedEventHandler PingCompleted;
        
        /// <remarks/>
        public event SendAttachmentChunkCompletedEventHandler SendAttachmentChunkCompleted;
        
        /// <remarks/>
        public event SendAttachmentCompletedEventHandler SendAttachmentCompleted;
        
        /// <remarks/>
        public event GetQueryResultsCompletedEventHandler GetQueryResultsCompleted;
        
        /// <remarks/>
        public event GetActionsListCompletedEventHandler GetActionsListCompleted;
        
        /// <remarks/>
        public event GetDataFromArchetypesCompletedEventHandler GetDataFromArchetypesCompleted;
        
        /// <remarks/>
        public event UpdateSyncItemTagCompletedEventHandler UpdateSyncItemTagCompleted;
        
        /// <remarks/>
        public event GetOutOfSyncItemsCompletedEventHandler GetOutOfSyncItemsCompleted;
        
        /// <remarks/>
        public event DoSpellCheckCompletedEventHandler DoSpellCheckCompleted;
        
        /// <remarks/>
        public event CreateModelCompletedEventHandler CreateModelCompleted;
        
        /// <remarks/>
        public event EditModelCompletedEventHandler EditModelCompleted;
        
        /// <remarks/>
        public event GetMappedItemCompletedEventHandler GetMappedItemCompleted;
        
        /// <remarks/>
        public event GetOneNoteMapCompletedEventHandler GetOneNoteMapCompleted;
        
        /// <remarks/>
        public event GetBusinessObjectMethodsCompletedEventHandler GetBusinessObjectMethodsCompleted;
        
        /// <remarks/>
        public event StartProcessWithDefaultsCompletedEventHandler StartProcessWithDefaultsCompleted;
        
        /// <remarks/>
        public event TEST_GetDataCompletedEventHandler TEST_GetDataCompleted;
        
        /// <remarks/>
        public event TEST_GetDataFromReportLayoutCompletedEventHandler TEST_GetDataFromReportLayoutCompleted;
        
        /// <remarks/>
        public event BuildFromClientXMLCompletedEventHandler BuildFromClientXMLCompleted;
        
        /// <remarks/>
        public event ImageConnectDeleteCompletedEventHandler ImageConnectDeleteCompleted;
        
        /// <remarks/>
        public event GetOptionCompletedEventHandler GetOptionCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org//ServiceExecuteProcess/ExposeEnum", RequestNamespace="http://tempuri.org//ServiceExecuteProcess", ResponseNamespace="http://tempuri.org//ServiceExecuteProcess", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ReturnInfoType ExposeEnum(string processXML, int returnInfo) {
            object[] results = this.Invoke("ExposeEnum", new object[] {
                        processXML,
                        returnInfo});
            return ((ReturnInfoType)(results[0]));
        }
        
        /// <remarks/>
        public void ExposeEnumAsync(string processXML, int returnInfo) {
            this.ExposeEnumAsync(processXML, returnInfo, null);
        }
        
        /// <remarks/>
        public void ExposeEnumAsync(string processXML, int returnInfo, object userState) {
            if ((this.ExposeEnumOperationCompleted == null)) {
                this.ExposeEnumOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExposeEnumOperationCompleted);
            }
            this.InvokeAsync("ExposeEnum", new object[] {
                        processXML,
                        returnInfo}, this.ExposeEnumOperationCompleted, userState);
        }
        
        private void OnExposeEnumOperationCompleted(object arg) {
            if ((this.ExposeEnumCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExposeEnumCompleted(this, new ExposeEnumCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org//ServiceExecuteProcess/ExecuteProcess", RequestNamespace="http://tempuri.org//ServiceExecuteProcess", ResponseNamespace="http://tempuri.org//ServiceExecuteProcess", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ExecuteProcess(string processXML, int returnInfo) {
            object[] results = this.Invoke("ExecuteProcess", new object[] {
                        processXML,
                        returnInfo});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ExecuteProcessAsync(string processXML, int returnInfo) {
            this.ExecuteProcessAsync(processXML, returnInfo, null);
        }
        
        /// <remarks/>
        public void ExecuteProcessAsync(string processXML, int returnInfo, object userState) {
            if ((this.ExecuteProcessOperationCompleted == null)) {
                this.ExecuteProcessOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecuteProcessOperationCompleted);
            }
            this.InvokeAsync("ExecuteProcess", new object[] {
                        processXML,
                        returnInfo}, this.ExecuteProcessOperationCompleted, userState);
        }
        
        private void OnExecuteProcessOperationCompleted(object arg) {
            if ((this.ExecuteProcessCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecuteProcessCompleted(this, new ExecuteProcessCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org//ServiceExecuteProcess/CancelAllOpenProcesses", RequestNamespace="http://tempuri.org//ServiceExecuteProcess", ResponseNamespace="http://tempuri.org//ServiceExecuteProcess", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CancelAllOpenProcesses() {
            object[] results = this.Invoke("CancelAllOpenProcesses", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CancelAllOpenProcessesAsync() {
            this.CancelAllOpenProcessesAsync(null);
        }
        
        /// <remarks/>
        public void CancelAllOpenProcessesAsync(object userState) {
            if ((this.CancelAllOpenProcessesOperationCompleted == null)) {
                this.CancelAllOpenProcessesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCancelAllOpenProcessesOperationCompleted);
            }
            this.InvokeAsync("CancelAllOpenProcesses", new object[0], this.CancelAllOpenProcessesOperationCompleted, userState);
        }
        
        private void OnCancelAllOpenProcessesOperationCompleted(object arg) {
            if ((this.CancelAllOpenProcessesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CancelAllOpenProcessesCompleted(this, new CancelAllOpenProcessesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org//ServiceExecuteProcess/GetArchetypeData", RequestNamespace="http://tempuri.org//ServiceExecuteProcess", ResponseNamespace="http://tempuri.org//ServiceExecuteProcess", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetArchetypeData(string selectXml) {
            object[] results = this.Invoke("GetArchetypeData", new object[] {
                        selectXml});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetArchetypeDataAsync(string selectXml) {
            this.GetArchetypeDataAsync(selectXml, null);
        }
        
        /// <remarks/>
        public void GetArchetypeDataAsync(string selectXml, object userState) {
            if ((this.GetArchetypeDataOperationCompleted == null)) {
                this.GetArchetypeDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetArchetypeDataOperationCompleted);
            }
            this.InvokeAsync("GetArchetypeData", new object[] {
                        selectXml}, this.GetArchetypeDataOperationCompleted, userState);
        }
        
        private void OnGetArchetypeDataOperationCompleted(object arg) {
            if ((this.GetArchetypeDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetArchetypeDataCompleted(this, new GetArchetypeDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org//ServiceExecuteProcess/GetMetricData", RequestNamespace="http://tempuri.org//ServiceExecuteProcess", ResponseNamespace="http://tempuri.org//ServiceExecuteProcess", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetMetricData(string selectXml, int metricRunIndex, bool isRunIndexRelative, string metricGroupID) {
            object[] results = this.Invoke("GetMetricData", new object[] {
                        selectXml,
                        metricRunIndex,
                        isRunIndexRelative,
                        metricGroupID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetMetricDataAsync(string selectXml, int metricRunIndex, bool isRunIndexRelative, string metricGroupID) {
            this.GetMetricDataAsync(selectXml, metricRunIndex, isRunIndexRelative, metricGroupID, null);
        }
        
        /// <remarks/>
        public void GetMetricDataAsync(string selectXml, int metricRunIndex, bool isRunIndexRelative, string metricGroupID, object userState) {
            if ((this.GetMetricDataOperationCompleted == null)) {
                this.GetMetricDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMetricDataOperationCompleted);
            }
            this.InvokeAsync("GetMetricData", new object[] {
                        selectXml,
                        metricRunIndex,
                        isRunIndexRelative,
                        metricGroupID}, this.GetMetricDataOperationCompleted, userState);
        }
        
        private void OnGetMetricDataOperationCompleted(object arg) {
            if ((this.GetMetricDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMetricDataCompleted(this, new GetMetricDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org//ServiceExecuteProcess/GetNamedMetricData", RequestNamespace="http://tempuri.org//ServiceExecuteProcess", ResponseNamespace="http://tempuri.org//ServiceExecuteProcess", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetNamedMetricData(string selectXml, string metricTableName) {
            object[] results = this.Invoke("GetNamedMetricData", new object[] {
                        selectXml,
                        metricTableName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetNamedMetricDataAsync(string selectXml, string metricTableName) {
            this.GetNamedMetricDataAsync(selectXml, metricTableName, null);
        }
        
        /// <remarks/>
        public void GetNamedMetricDataAsync(string selectXml, string metricTableName, object userState) {
            if ((this.GetNamedMetricDataOperationCompleted == null)) {
                this.GetNamedMetricDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetNamedMetricDataOperationCompleted);
            }
            this.InvokeAsync("GetNamedMetricData", new object[] {
                        selectXml,
                        metricTableName}, this.GetNamedMetricDataOperationCompleted, userState);
        }
        
        private void OnGetNamedMetricDataOperationCompleted(object arg) {
            if ((this.GetNamedMetricDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetNamedMetricDataCompleted(this, new GetNamedMetricDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org//ServiceExecuteProcess/GetArchetypeDataSQL", RequestNamespace="http://tempuri.org//ServiceExecuteProcess", ResponseNamespace="http://tempuri.org//ServiceExecuteProcess", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetArchetypeDataSQL(string selectXml) {
            object[] results = this.Invoke("GetArchetypeDataSQL", new object[] {
                        selectXml});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetArchetypeDataSQLAsync(string selectXml) {
            this.GetArchetypeDataSQLAsync(selectXml, null);
        }
        
        /// <remarks/>
        public void GetArchetypeDataSQLAsync(string selectXml, object userState) {
            if ((this.GetArchetypeDataSQLOperationCompleted == null)) {
                this.GetArchetypeDataSQLOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetArchetypeDataSQLOperationCompleted);
            }
            this.InvokeAsync("GetArchetypeDataSQL", new object[] {
                        selectXml}, this.GetArchetypeDataSQLOperationCompleted, userState);
        }
        
        private void OnGetArchetypeDataSQLOperationCompleted(object arg) {
            if ((this.GetArchetypeDataSQLCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetArchetypeDataSQLCompleted(this, new GetArchetypeDataSQLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org//ServiceExecuteProcess/GetMetricDataSQL", RequestNamespace="http://tempuri.org//ServiceExecuteProcess", ResponseNamespace="http://tempuri.org//ServiceExecuteProcess", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetMetricDataSQL(string selectXml, int metricRunIndex, bool isRunIndexRelative, string metricGroupID) {
            object[] results = this.Invoke("GetMetricDataSQL", new object[] {
                        selectXml,
                        metricRunIndex,
                        isRunIndexRelative,
                        metricGroupID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetMetricDataSQLAsync(string selectXml, int metricRunIndex, bool isRunIndexRelative, string metricGroupID) {
            this.GetMetricDataSQLAsync(selectXml, metricRunIndex, isRunIndexRelative, metricGroupID, null);
        }
        
        /// <remarks/>
        public void GetMetricDataSQLAsync(string selectXml, int metricRunIndex, bool isRunIndexRelative, string metricGroupID, object userState) {
            if ((this.GetMetricDataSQLOperationCompleted == null)) {
                this.GetMetricDataSQLOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMetricDataSQLOperationCompleted);
            }
            this.InvokeAsync("GetMetricDataSQL", new object[] {
                        selectXml,
                        metricRunIndex,
                        isRunIndexRelative,
                        metricGroupID}, this.GetMetricDataSQLOperationCompleted, userState);
        }
        
        private void OnGetMetricDataSQLOperationCompleted(object arg) {
            if ((this.GetMetricDataSQLCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMetricDataSQLCompleted(this, new GetMetricDataSQLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org//ServiceExecuteProcess/GetNamedMetricDataSQL", RequestNamespace="http://tempuri.org//ServiceExecuteProcess", ResponseNamespace="http://tempuri.org//ServiceExecuteProcess", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetNamedMetricDataSQL(string selectXml, string metricTableName) {
            object[] results = this.Invoke("GetNamedMetricDataSQL", new object[] {
                        selectXml,
                        metricTableName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetNamedMetricDataSQLAsync(string selectXml, string metricTableName) {
            this.GetNamedMetricDataSQLAsync(selectXml, metricTableName, null);
        }
        
        /// <remarks/>
        public void GetNamedMetricDataSQLAsync(string selectXml, string metricTableName, object userState) {
            if ((this.GetNamedMetricDataSQLOperationCompleted == null)) {
                this.GetNamedMetricDataSQLOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetNamedMetricDataSQLOperationCompleted);
            }
            this.InvokeAsync("GetNamedMetricDataSQL", new object[] {
                        selectXml,
                        metricTableName}, this.GetNamedMetricDataSQLOperationCompleted, userState);
        }
        
        private void OnGetNamedMetricDataSQLOperationCompleted(object arg) {
            if ((this.GetNamedMetricDataSQLCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetNamedMetricDataSQLCompleted(this, new GetNamedMetricDataSQLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org//ServiceExecuteProcess/GetData", RequestNamespace="http://tempuri.org//ServiceExecuteProcess", ResponseNamespace="http://tempuri.org//ServiceExecuteProcess", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetData(string reportQueryXML) {
            object[] results = this.Invoke("GetData", new object[] {
                        reportQueryXML});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDataAsync(string reportQueryXML) {
            this.GetDataAsync(reportQueryXML, null);
        }
        
        /// <remarks/>
        public void GetDataAsync(string reportQueryXML, object userState) {
            if ((this.GetDataOperationCompleted == null)) {
                this.GetDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDataOperationCompleted);
            }
            this.InvokeAsync("GetData", new object[] {
                        reportQueryXML}, this.GetDataOperationCompleted, userState);
        }
        
        private void OnGetDataOperationCompleted(object arg) {
            if ((this.GetDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDataCompleted(this, new GetDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org//ServiceExecuteProcess/GetDataFromReportLayout", RequestNamespace="http://tempuri.org//ServiceExecuteProcess", ResponseNamespace="http://tempuri.org//ServiceExecuteProcess", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetDataFromReportLayout(string reportLayoutId) {
            object[] results = this.Invoke("GetDataFromReportLayout", new object[] {
                        reportLayoutId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDataFromReportLayoutAsync(string reportLayoutId) {
            this.GetDataFromReportLayoutAsync(reportLayoutId, null);
        }
        
        /// <remarks/>
        public void GetDataFromReportLayoutAsync(string reportLayoutId, object userState) {
            if ((this.GetDataFromReportLayoutOperationCompleted == null)) {
                this.GetDataFromReportLayoutOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDataFromReportLayoutOperationCompleted);
            }
            this.InvokeAsync("GetDataFromReportLayout", new object[] {
                        reportLayoutId}, this.GetDataFromReportLayoutOperationCompleted, userState);
        }
        
        private void OnGetDataFromReportLayoutOperationCompleted(object arg) {
            if ((this.GetDataFromReportLayoutCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDataFromReportLayoutCompleted(this, new GetDataFromReportLayoutCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org//ServiceExecuteProcess/GetDataFromReportLayoutCrystal", RequestNamespace="http://tempuri.org//ServiceExecuteProcess", ResponseNamespace="http://tempuri.org//ServiceExecuteProcess", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetDataFromReportLayoutCrystal(string reportLayoutId) {
            object[] results = this.Invoke("GetDataFromReportLayoutCrystal", new object[] {
                        reportLayoutId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDataFromReportLayoutCrystalAsync(string reportLayoutId) {
            this.GetDataFromReportLayoutCrystalAsync(reportLayoutId, null);
        }
        
        /// <remarks/>
        public void GetDataFromReportLayoutCrystalAsync(string reportLayoutId, object userState) {
            if ((this.GetDataFromReportLayoutCrystalOperationCompleted == null)) {
                this.GetDataFromReportLayoutCrystalOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDataFromReportLayoutCrystalOperationCompleted);
            }
            this.InvokeAsync("GetDataFromReportLayoutCrystal", new object[] {
                        reportLayoutId}, this.GetDataFromReportLayoutCrystalOperationCompleted, userState);
        }
        
        private void OnGetDataFromReportLayoutCrystalOperationCompleted(object arg) {
            if ((this.GetDataFromReportLayoutCrystalCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDataFromReportLayoutCrystalCompleted(this, new GetDataFromReportLayoutCrystalCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org//ServiceExecuteProcess/GetSyncIds", RequestNamespace="http://tempuri.org//ServiceExecuteProcess", ResponseNamespace="http://tempuri.org//ServiceExecuteProcess", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetSyncIds() {
            object[] results = this.Invoke("GetSyncIds", new object[0]);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetSyncIdsAsync() {
            this.GetSyncIdsAsync(null);
        }
        
        /// <remarks/>
        public void GetSyncIdsAsync(object userState) {
            if ((this.GetSyncIdsOperationCompleted == null)) {
                this.GetSyncIdsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSyncIdsOperationCompleted);
            }
            this.InvokeAsync("GetSyncIds", new object[0], this.GetSyncIdsOperationCompleted, userState);
        }
        
        private void OnGetSyncIdsOperationCompleted(object arg) {
            if ((this.GetSyncIdsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSyncIdsCompleted(this, new GetSyncIdsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org//ServiceExecuteProcess/CheckFileHash", RequestNamespace="http://tempuri.org//ServiceExecuteProcess", ResponseNamespace="http://tempuri.org//ServiceExecuteProcess", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CheckFileHash(string syncId) {
            object[] results = this.Invoke("CheckFileHash", new object[] {
                        syncId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CheckFileHashAsync(string syncId) {
            this.CheckFileHashAsync(syncId, null);
        }
        
        /// <remarks/>
        public void CheckFileHashAsync(string syncId, object userState) {
            if ((this.CheckFileHashOperationCompleted == null)) {
                this.CheckFileHashOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckFileHashOperationCompleted);
            }
            this.InvokeAsync("CheckFileHash", new object[] {
                        syncId}, this.CheckFileHashOperationCompleted, userState);
        }
        
        private void OnCheckFileHashOperationCompleted(object arg) {
            if ((this.CheckFileHashCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckFileHashCompleted(this, new CheckFileHashCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org//ServiceExecuteProcess/Ping", RequestNamespace="http://tempuri.org//ServiceExecuteProcess", ResponseNamespace="http://tempuri.org//ServiceExecuteProcess", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Ping() {
            this.Invoke("Ping", new object[0]);
        }
        
        /// <remarks/>
        public void PingAsync() {
            this.PingAsync(null);
        }
        
        /// <remarks/>
        public void PingAsync(object userState) {
            if ((this.PingOperationCompleted == null)) {
                this.PingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPingOperationCompleted);
            }
            this.InvokeAsync("Ping", new object[0], this.PingOperationCompleted, userState);
        }
        
        private void OnPingOperationCompleted(object arg) {
            if ((this.PingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PingCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org//ServiceExecuteProcess/SendAttachmentChunk", RequestNamespace="http://tempuri.org//ServiceExecuteProcess", ResponseNamespace="http://tempuri.org//ServiceExecuteProcess", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SendAttachmentChunk(string syncId, string fileName, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] buffer, long offset, int bytesRead, long totalBytes) {
            this.Invoke("SendAttachmentChunk", new object[] {
                        syncId,
                        fileName,
                        buffer,
                        offset,
                        bytesRead,
                        totalBytes});
        }
        
        /// <remarks/>
        public void SendAttachmentChunkAsync(string syncId, string fileName, byte[] buffer, long offset, int bytesRead, long totalBytes) {
            this.SendAttachmentChunkAsync(syncId, fileName, buffer, offset, bytesRead, totalBytes, null);
        }
        
        /// <remarks/>
        public void SendAttachmentChunkAsync(string syncId, string fileName, byte[] buffer, long offset, int bytesRead, long totalBytes, object userState) {
            if ((this.SendAttachmentChunkOperationCompleted == null)) {
                this.SendAttachmentChunkOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendAttachmentChunkOperationCompleted);
            }
            this.InvokeAsync("SendAttachmentChunk", new object[] {
                        syncId,
                        fileName,
                        buffer,
                        offset,
                        bytesRead,
                        totalBytes}, this.SendAttachmentChunkOperationCompleted, userState);
        }
        
        private void OnSendAttachmentChunkOperationCompleted(object arg) {
            if ((this.SendAttachmentChunkCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendAttachmentChunkCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org//ServiceExecuteProcess/SendAttachment", RequestNamespace="http://tempuri.org//ServiceExecuteProcess", ResponseNamespace="http://tempuri.org//ServiceExecuteProcess", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SendAttachment(System.Guid itemID, string archetypeID, string syncId, string fileName, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] buffer, long offset, int bytesRead, long totalBytes) {
            this.Invoke("SendAttachment", new object[] {
                        itemID,
                        archetypeID,
                        syncId,
                        fileName,
                        buffer,
                        offset,
                        bytesRead,
                        totalBytes});
        }
        
        /// <remarks/>
        public void SendAttachmentAsync(System.Guid itemID, string archetypeID, string syncId, string fileName, byte[] buffer, long offset, int bytesRead, long totalBytes) {
            this.SendAttachmentAsync(itemID, archetypeID, syncId, fileName, buffer, offset, bytesRead, totalBytes, null);
        }
        
        /// <remarks/>
        public void SendAttachmentAsync(System.Guid itemID, string archetypeID, string syncId, string fileName, byte[] buffer, long offset, int bytesRead, long totalBytes, object userState) {
            if ((this.SendAttachmentOperationCompleted == null)) {
                this.SendAttachmentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendAttachmentOperationCompleted);
            }
            this.InvokeAsync("SendAttachment", new object[] {
                        itemID,
                        archetypeID,
                        syncId,
                        fileName,
                        buffer,
                        offset,
                        bytesRead,
                        totalBytes}, this.SendAttachmentOperationCompleted, userState);
        }
        
        private void OnSendAttachmentOperationCompleted(object arg) {
            if ((this.SendAttachmentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendAttachmentCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org//ServiceExecuteProcess/GetQueryResults", RequestNamespace="http://tempuri.org//ServiceExecuteProcess", ResponseNamespace="http://tempuri.org//ServiceExecuteProcess", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetQueryResults(string archID, string metricID, string objectID, string sessionID, string processItemID, string XPath, string objectData, string quickFindValue, string XOQLStatement, int topRows) {
            object[] results = this.Invoke("GetQueryResults", new object[] {
                        archID,
                        metricID,
                        objectID,
                        sessionID,
                        processItemID,
                        XPath,
                        objectData,
                        quickFindValue,
                        XOQLStatement,
                        topRows});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetQueryResultsAsync(string archID, string metricID, string objectID, string sessionID, string processItemID, string XPath, string objectData, string quickFindValue, string XOQLStatement, int topRows) {
            this.GetQueryResultsAsync(archID, metricID, objectID, sessionID, processItemID, XPath, objectData, quickFindValue, XOQLStatement, topRows, null);
        }
        
        /// <remarks/>
        public void GetQueryResultsAsync(string archID, string metricID, string objectID, string sessionID, string processItemID, string XPath, string objectData, string quickFindValue, string XOQLStatement, int topRows, object userState) {
            if ((this.GetQueryResultsOperationCompleted == null)) {
                this.GetQueryResultsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetQueryResultsOperationCompleted);
            }
            this.InvokeAsync("GetQueryResults", new object[] {
                        archID,
                        metricID,
                        objectID,
                        sessionID,
                        processItemID,
                        XPath,
                        objectData,
                        quickFindValue,
                        XOQLStatement,
                        topRows}, this.GetQueryResultsOperationCompleted, userState);
        }
        
        private void OnGetQueryResultsOperationCompleted(object arg) {
            if ((this.GetQueryResultsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetQueryResultsCompleted(this, new GetQueryResultsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org//ServiceExecuteProcess/GetActionsList", RequestNamespace="http://tempuri.org//ServiceExecuteProcess", ResponseNamespace="http://tempuri.org//ServiceExecuteProcess", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetActionsList() {
            object[] results = this.Invoke("GetActionsList", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetActionsListAsync() {
            this.GetActionsListAsync(null);
        }
        
        /// <remarks/>
        public void GetActionsListAsync(object userState) {
            if ((this.GetActionsListOperationCompleted == null)) {
                this.GetActionsListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetActionsListOperationCompleted);
            }
            this.InvokeAsync("GetActionsList", new object[0], this.GetActionsListOperationCompleted, userState);
        }
        
        private void OnGetActionsListOperationCompleted(object arg) {
            if ((this.GetActionsListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetActionsListCompleted(this, new GetActionsListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org//ServiceExecuteProcess/GetDataFromArchetypes", RequestNamespace="http://tempuri.org//ServiceExecuteProcess", ResponseNamespace="http://tempuri.org//ServiceExecuteProcess", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetDataFromArchetypes(string paramsXML) {
            object[] results = this.Invoke("GetDataFromArchetypes", new object[] {
                        paramsXML});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDataFromArchetypesAsync(string paramsXML) {
            this.GetDataFromArchetypesAsync(paramsXML, null);
        }
        
        /// <remarks/>
        public void GetDataFromArchetypesAsync(string paramsXML, object userState) {
            if ((this.GetDataFromArchetypesOperationCompleted == null)) {
                this.GetDataFromArchetypesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDataFromArchetypesOperationCompleted);
            }
            this.InvokeAsync("GetDataFromArchetypes", new object[] {
                        paramsXML}, this.GetDataFromArchetypesOperationCompleted, userState);
        }
        
        private void OnGetDataFromArchetypesOperationCompleted(object arg) {
            if ((this.GetDataFromArchetypesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDataFromArchetypesCompleted(this, new GetDataFromArchetypesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org//ServiceExecuteProcess/UpdateSyncItemTag", RequestNamespace="http://tempuri.org//ServiceExecuteProcess", ResponseNamespace="http://tempuri.org//ServiceExecuteProcess", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UpdateSyncItemTag(string itemIDToSync, string tag) {
            object[] results = this.Invoke("UpdateSyncItemTag", new object[] {
                        itemIDToSync,
                        tag});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateSyncItemTagAsync(string itemIDToSync, string tag) {
            this.UpdateSyncItemTagAsync(itemIDToSync, tag, null);
        }
        
        /// <remarks/>
        public void UpdateSyncItemTagAsync(string itemIDToSync, string tag, object userState) {
            if ((this.UpdateSyncItemTagOperationCompleted == null)) {
                this.UpdateSyncItemTagOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateSyncItemTagOperationCompleted);
            }
            this.InvokeAsync("UpdateSyncItemTag", new object[] {
                        itemIDToSync,
                        tag}, this.UpdateSyncItemTagOperationCompleted, userState);
        }
        
        private void OnUpdateSyncItemTagOperationCompleted(object arg) {
            if ((this.UpdateSyncItemTagCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateSyncItemTagCompleted(this, new UpdateSyncItemTagCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org//ServiceExecuteProcess/GetOutOfSyncItems", RequestNamespace="http://tempuri.org//ServiceExecuteProcess", ResponseNamespace="http://tempuri.org//ServiceExecuteProcess", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetOutOfSyncItems(string LastSyncTime, string Tag, int FirstRows, string ExcludeItemIDList) {
            object[] results = this.Invoke("GetOutOfSyncItems", new object[] {
                        LastSyncTime,
                        Tag,
                        FirstRows,
                        ExcludeItemIDList});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetOutOfSyncItemsAsync(string LastSyncTime, string Tag, int FirstRows, string ExcludeItemIDList) {
            this.GetOutOfSyncItemsAsync(LastSyncTime, Tag, FirstRows, ExcludeItemIDList, null);
        }
        
        /// <remarks/>
        public void GetOutOfSyncItemsAsync(string LastSyncTime, string Tag, int FirstRows, string ExcludeItemIDList, object userState) {
            if ((this.GetOutOfSyncItemsOperationCompleted == null)) {
                this.GetOutOfSyncItemsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetOutOfSyncItemsOperationCompleted);
            }
            this.InvokeAsync("GetOutOfSyncItems", new object[] {
                        LastSyncTime,
                        Tag,
                        FirstRows,
                        ExcludeItemIDList}, this.GetOutOfSyncItemsOperationCompleted, userState);
        }
        
        private void OnGetOutOfSyncItemsOperationCompleted(object arg) {
            if ((this.GetOutOfSyncItemsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetOutOfSyncItemsCompleted(this, new GetOutOfSyncItemsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org//ServiceExecuteProcess/DoSpellCheck", RequestNamespace="http://tempuri.org//ServiceExecuteProcess", ResponseNamespace="http://tempuri.org//ServiceExecuteProcess", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DoSpellCheck(string ActionXML) {
            object[] results = this.Invoke("DoSpellCheck", new object[] {
                        ActionXML});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DoSpellCheckAsync(string ActionXML) {
            this.DoSpellCheckAsync(ActionXML, null);
        }
        
        /// <remarks/>
        public void DoSpellCheckAsync(string ActionXML, object userState) {
            if ((this.DoSpellCheckOperationCompleted == null)) {
                this.DoSpellCheckOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDoSpellCheckOperationCompleted);
            }
            this.InvokeAsync("DoSpellCheck", new object[] {
                        ActionXML}, this.DoSpellCheckOperationCompleted, userState);
        }
        
        private void OnDoSpellCheckOperationCompleted(object arg) {
            if ((this.DoSpellCheckCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DoSpellCheckCompleted(this, new DoSpellCheckCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org//ServiceExecuteProcess/CreateModel", RequestNamespace="http://tempuri.org//ServiceExecuteProcess", ResponseNamespace="http://tempuri.org//ServiceExecuteProcess", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CreateModel(string Model, bool IsGlobal, string ProcessID, string PIID) {
            object[] results = this.Invoke("CreateModel", new object[] {
                        Model,
                        IsGlobal,
                        ProcessID,
                        PIID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CreateModelAsync(string Model, bool IsGlobal, string ProcessID, string PIID) {
            this.CreateModelAsync(Model, IsGlobal, ProcessID, PIID, null);
        }
        
        /// <remarks/>
        public void CreateModelAsync(string Model, bool IsGlobal, string ProcessID, string PIID, object userState) {
            if ((this.CreateModelOperationCompleted == null)) {
                this.CreateModelOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateModelOperationCompleted);
            }
            this.InvokeAsync("CreateModel", new object[] {
                        Model,
                        IsGlobal,
                        ProcessID,
                        PIID}, this.CreateModelOperationCompleted, userState);
        }
        
        private void OnCreateModelOperationCompleted(object arg) {
            if ((this.CreateModelCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateModelCompleted(this, new CreateModelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org//ServiceExecuteProcess/EditModel", RequestNamespace="http://tempuri.org//ServiceExecuteProcess", ResponseNamespace="http://tempuri.org//ServiceExecuteProcess", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string EditModel(string Model, string Action, bool IsGlobal, string NewModelName, string ProcessID) {
            object[] results = this.Invoke("EditModel", new object[] {
                        Model,
                        Action,
                        IsGlobal,
                        NewModelName,
                        ProcessID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void EditModelAsync(string Model, string Action, bool IsGlobal, string NewModelName, string ProcessID) {
            this.EditModelAsync(Model, Action, IsGlobal, NewModelName, ProcessID, null);
        }
        
        /// <remarks/>
        public void EditModelAsync(string Model, string Action, bool IsGlobal, string NewModelName, string ProcessID, object userState) {
            if ((this.EditModelOperationCompleted == null)) {
                this.EditModelOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEditModelOperationCompleted);
            }
            this.InvokeAsync("EditModel", new object[] {
                        Model,
                        Action,
                        IsGlobal,
                        NewModelName,
                        ProcessID}, this.EditModelOperationCompleted, userState);
        }
        
        private void OnEditModelOperationCompleted(object arg) {
            if ((this.EditModelCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EditModelCompleted(this, new EditModelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org//ServiceExecuteProcess/GetMappedItem", RequestNamespace="http://tempuri.org//ServiceExecuteProcess", ResponseNamespace="http://tempuri.org//ServiceExecuteProcess", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetMappedItem(string ItemID, string SyncMapID) {
            object[] results = this.Invoke("GetMappedItem", new object[] {
                        ItemID,
                        SyncMapID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetMappedItemAsync(string ItemID, string SyncMapID) {
            this.GetMappedItemAsync(ItemID, SyncMapID, null);
        }
        
        /// <remarks/>
        public void GetMappedItemAsync(string ItemID, string SyncMapID, object userState) {
            if ((this.GetMappedItemOperationCompleted == null)) {
                this.GetMappedItemOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMappedItemOperationCompleted);
            }
            this.InvokeAsync("GetMappedItem", new object[] {
                        ItemID,
                        SyncMapID}, this.GetMappedItemOperationCompleted, userState);
        }
        
        private void OnGetMappedItemOperationCompleted(object arg) {
            if ((this.GetMappedItemCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMappedItemCompleted(this, new GetMappedItemCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org//ServiceExecuteProcess/GetOneNoteMap", RequestNamespace="http://tempuri.org//ServiceExecuteProcess", ResponseNamespace="http://tempuri.org//ServiceExecuteProcess", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetOneNoteMap(string MapName, string ItemID, string ArchetypeID) {
            object[] results = this.Invoke("GetOneNoteMap", new object[] {
                        MapName,
                        ItemID,
                        ArchetypeID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetOneNoteMapAsync(string MapName, string ItemID, string ArchetypeID) {
            this.GetOneNoteMapAsync(MapName, ItemID, ArchetypeID, null);
        }
        
        /// <remarks/>
        public void GetOneNoteMapAsync(string MapName, string ItemID, string ArchetypeID, object userState) {
            if ((this.GetOneNoteMapOperationCompleted == null)) {
                this.GetOneNoteMapOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetOneNoteMapOperationCompleted);
            }
            this.InvokeAsync("GetOneNoteMap", new object[] {
                        MapName,
                        ItemID,
                        ArchetypeID}, this.GetOneNoteMapOperationCompleted, userState);
        }
        
        private void OnGetOneNoteMapOperationCompleted(object arg) {
            if ((this.GetOneNoteMapCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetOneNoteMapCompleted(this, new GetOneNoteMapCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org//ServiceExecuteProcess/GetBusinessObjectMethods", RequestNamespace="http://tempuri.org//ServiceExecuteProcess", ResponseNamespace="http://tempuri.org//ServiceExecuteProcess", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetBusinessObjectMethods(string businessObject) {
            object[] results = this.Invoke("GetBusinessObjectMethods", new object[] {
                        businessObject});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetBusinessObjectMethodsAsync(string businessObject) {
            this.GetBusinessObjectMethodsAsync(businessObject, null);
        }
        
        /// <remarks/>
        public void GetBusinessObjectMethodsAsync(string businessObject, object userState) {
            if ((this.GetBusinessObjectMethodsOperationCompleted == null)) {
                this.GetBusinessObjectMethodsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBusinessObjectMethodsOperationCompleted);
            }
            this.InvokeAsync("GetBusinessObjectMethods", new object[] {
                        businessObject}, this.GetBusinessObjectMethodsOperationCompleted, userState);
        }
        
        private void OnGetBusinessObjectMethodsOperationCompleted(object arg) {
            if ((this.GetBusinessObjectMethodsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBusinessObjectMethodsCompleted(this, new GetBusinessObjectMethodsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org//ServiceExecuteProcess/StartProcessWithDefaults", RequestNamespace="http://tempuri.org//ServiceExecuteProcess", ResponseNamespace="http://tempuri.org//ServiceExecuteProcess", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string StartProcessWithDefaults(string defaultsXML) {
            object[] results = this.Invoke("StartProcessWithDefaults", new object[] {
                        defaultsXML});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void StartProcessWithDefaultsAsync(string defaultsXML) {
            this.StartProcessWithDefaultsAsync(defaultsXML, null);
        }
        
        /// <remarks/>
        public void StartProcessWithDefaultsAsync(string defaultsXML, object userState) {
            if ((this.StartProcessWithDefaultsOperationCompleted == null)) {
                this.StartProcessWithDefaultsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnStartProcessWithDefaultsOperationCompleted);
            }
            this.InvokeAsync("StartProcessWithDefaults", new object[] {
                        defaultsXML}, this.StartProcessWithDefaultsOperationCompleted, userState);
        }
        
        private void OnStartProcessWithDefaultsOperationCompleted(object arg) {
            if ((this.StartProcessWithDefaultsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.StartProcessWithDefaultsCompleted(this, new StartProcessWithDefaultsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org//ServiceExecuteProcess/TEST_GetData", RequestNamespace="http://tempuri.org//ServiceExecuteProcess", ResponseNamespace="http://tempuri.org//ServiceExecuteProcess", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string TEST_GetData(string reportQueryXML) {
            object[] results = this.Invoke("TEST_GetData", new object[] {
                        reportQueryXML});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void TEST_GetDataAsync(string reportQueryXML) {
            this.TEST_GetDataAsync(reportQueryXML, null);
        }
        
        /// <remarks/>
        public void TEST_GetDataAsync(string reportQueryXML, object userState) {
            if ((this.TEST_GetDataOperationCompleted == null)) {
                this.TEST_GetDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTEST_GetDataOperationCompleted);
            }
            this.InvokeAsync("TEST_GetData", new object[] {
                        reportQueryXML}, this.TEST_GetDataOperationCompleted, userState);
        }
        
        private void OnTEST_GetDataOperationCompleted(object arg) {
            if ((this.TEST_GetDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TEST_GetDataCompleted(this, new TEST_GetDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org//ServiceExecuteProcess/TEST_GetDataFromReportLayout", RequestNamespace="http://tempuri.org//ServiceExecuteProcess", ResponseNamespace="http://tempuri.org//ServiceExecuteProcess", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string TEST_GetDataFromReportLayout(string reportLayoutId) {
            object[] results = this.Invoke("TEST_GetDataFromReportLayout", new object[] {
                        reportLayoutId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void TEST_GetDataFromReportLayoutAsync(string reportLayoutId) {
            this.TEST_GetDataFromReportLayoutAsync(reportLayoutId, null);
        }
        
        /// <remarks/>
        public void TEST_GetDataFromReportLayoutAsync(string reportLayoutId, object userState) {
            if ((this.TEST_GetDataFromReportLayoutOperationCompleted == null)) {
                this.TEST_GetDataFromReportLayoutOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTEST_GetDataFromReportLayoutOperationCompleted);
            }
            this.InvokeAsync("TEST_GetDataFromReportLayout", new object[] {
                        reportLayoutId}, this.TEST_GetDataFromReportLayoutOperationCompleted, userState);
        }
        
        private void OnTEST_GetDataFromReportLayoutOperationCompleted(object arg) {
            if ((this.TEST_GetDataFromReportLayoutCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TEST_GetDataFromReportLayoutCompleted(this, new TEST_GetDataFromReportLayoutCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org//ServiceExecuteProcess/BuildFromClientXML", RequestNamespace="http://tempuri.org//ServiceExecuteProcess", ResponseNamespace="http://tempuri.org//ServiceExecuteProcess", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string BuildFromClientXML(string clientXML) {
            object[] results = this.Invoke("BuildFromClientXML", new object[] {
                        clientXML});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void BuildFromClientXMLAsync(string clientXML) {
            this.BuildFromClientXMLAsync(clientXML, null);
        }
        
        /// <remarks/>
        public void BuildFromClientXMLAsync(string clientXML, object userState) {
            if ((this.BuildFromClientXMLOperationCompleted == null)) {
                this.BuildFromClientXMLOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBuildFromClientXMLOperationCompleted);
            }
            this.InvokeAsync("BuildFromClientXML", new object[] {
                        clientXML}, this.BuildFromClientXMLOperationCompleted, userState);
        }
        
        private void OnBuildFromClientXMLOperationCompleted(object arg) {
            if ((this.BuildFromClientXMLCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BuildFromClientXMLCompleted(this, new BuildFromClientXMLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org//ServiceExecuteProcess/ImageConnectDelete", RequestNamespace="http://tempuri.org//ServiceExecuteProcess", ResponseNamespace="http://tempuri.org//ServiceExecuteProcess", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ImageConnectDelete(string attachmentID, string parentItemID) {
            object[] results = this.Invoke("ImageConnectDelete", new object[] {
                        attachmentID,
                        parentItemID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ImageConnectDeleteAsync(string attachmentID, string parentItemID) {
            this.ImageConnectDeleteAsync(attachmentID, parentItemID, null);
        }
        
        /// <remarks/>
        public void ImageConnectDeleteAsync(string attachmentID, string parentItemID, object userState) {
            if ((this.ImageConnectDeleteOperationCompleted == null)) {
                this.ImageConnectDeleteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnImageConnectDeleteOperationCompleted);
            }
            this.InvokeAsync("ImageConnectDelete", new object[] {
                        attachmentID,
                        parentItemID}, this.ImageConnectDeleteOperationCompleted, userState);
        }
        
        private void OnImageConnectDeleteOperationCompleted(object arg) {
            if ((this.ImageConnectDeleteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ImageConnectDeleteCompleted(this, new ImageConnectDeleteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org//ServiceExecuteProcess/GetOption", RequestNamespace="http://tempuri.org//ServiceExecuteProcess", ResponseNamespace="http://tempuri.org//ServiceExecuteProcess", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetOption(string optionName, DataTypeEnum optionType) {
            object[] results = this.Invoke("GetOption", new object[] {
                        optionName,
                        optionType});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetOptionAsync(string optionName, DataTypeEnum optionType) {
            this.GetOptionAsync(optionName, optionType, null);
        }
        
        /// <remarks/>
        public void GetOptionAsync(string optionName, DataTypeEnum optionType, object userState) {
            if ((this.GetOptionOperationCompleted == null)) {
                this.GetOptionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetOptionOperationCompleted);
            }
            this.InvokeAsync("GetOption", new object[] {
                        optionName,
                        optionType}, this.GetOptionOperationCompleted, userState);
        }
        
        private void OnGetOptionOperationCompleted(object arg) {
            if ((this.GetOptionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetOptionCompleted(this, new GetOptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org//ServiceExecuteProcess")]
    public enum ReturnInfoType {
        
        /// <remarks/>
        None,
        
        /// <remarks/>
        Keys,
        
        /// <remarks/>
        Timing,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org//ServiceExecuteProcess")]
    public enum DataTypeEnum {
        
        /// <remarks/>
        AUTONUMBER,
        
        /// <remarks/>
        BOOLEAN,
        
        /// <remarks/>
        DATE,
        
        /// <remarks/>
        DATETIME,
        
        /// <remarks/>
        DECIMAL,
        
        /// <remarks/>
        EMAIL,
        
        /// <remarks/>
        GUID,
        
        /// <remarks/>
        INTEGER,
        
        /// <remarks/>
        IMAGE,
        
        /// <remarks/>
        MONEY,
        
        /// <remarks/>
        MULTILANGUAGESTRING,
        
        /// <remarks/>
        NARRATIVE,
        
        /// <remarks/>
        PREDICATE,
        
        /// <remarks/>
        RELATIONSHIP,
        
        /// <remarks/>
        STRING,
        
        /// <remarks/>
        TEXT,
        
        /// <remarks/>
        URL,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ExposeEnumCompletedEventHandler(object sender, ExposeEnumCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExposeEnumCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExposeEnumCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ReturnInfoType Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ReturnInfoType)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ExecuteProcessCompletedEventHandler(object sender, ExecuteProcessCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExecuteProcessCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExecuteProcessCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CancelAllOpenProcessesCompletedEventHandler(object sender, CancelAllOpenProcessesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CancelAllOpenProcessesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CancelAllOpenProcessesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetArchetypeDataCompletedEventHandler(object sender, GetArchetypeDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetArchetypeDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetArchetypeDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetMetricDataCompletedEventHandler(object sender, GetMetricDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMetricDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMetricDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetNamedMetricDataCompletedEventHandler(object sender, GetNamedMetricDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetNamedMetricDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetNamedMetricDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetArchetypeDataSQLCompletedEventHandler(object sender, GetArchetypeDataSQLCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetArchetypeDataSQLCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetArchetypeDataSQLCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetMetricDataSQLCompletedEventHandler(object sender, GetMetricDataSQLCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMetricDataSQLCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMetricDataSQLCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetNamedMetricDataSQLCompletedEventHandler(object sender, GetNamedMetricDataSQLCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetNamedMetricDataSQLCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetNamedMetricDataSQLCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetDataCompletedEventHandler(object sender, GetDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetDataFromReportLayoutCompletedEventHandler(object sender, GetDataFromReportLayoutCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDataFromReportLayoutCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDataFromReportLayoutCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetDataFromReportLayoutCrystalCompletedEventHandler(object sender, GetDataFromReportLayoutCrystalCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDataFromReportLayoutCrystalCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDataFromReportLayoutCrystalCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetSyncIdsCompletedEventHandler(object sender, GetSyncIdsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSyncIdsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSyncIdsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CheckFileHashCompletedEventHandler(object sender, CheckFileHashCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckFileHashCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckFileHashCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void PingCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void SendAttachmentChunkCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void SendAttachmentCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetQueryResultsCompletedEventHandler(object sender, GetQueryResultsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetQueryResultsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetQueryResultsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetActionsListCompletedEventHandler(object sender, GetActionsListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetActionsListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetActionsListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetDataFromArchetypesCompletedEventHandler(object sender, GetDataFromArchetypesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDataFromArchetypesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDataFromArchetypesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void UpdateSyncItemTagCompletedEventHandler(object sender, UpdateSyncItemTagCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateSyncItemTagCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateSyncItemTagCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetOutOfSyncItemsCompletedEventHandler(object sender, GetOutOfSyncItemsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetOutOfSyncItemsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetOutOfSyncItemsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void DoSpellCheckCompletedEventHandler(object sender, DoSpellCheckCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DoSpellCheckCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DoSpellCheckCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CreateModelCompletedEventHandler(object sender, CreateModelCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateModelCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateModelCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void EditModelCompletedEventHandler(object sender, EditModelCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EditModelCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EditModelCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetMappedItemCompletedEventHandler(object sender, GetMappedItemCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMappedItemCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMappedItemCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetOneNoteMapCompletedEventHandler(object sender, GetOneNoteMapCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetOneNoteMapCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetOneNoteMapCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetBusinessObjectMethodsCompletedEventHandler(object sender, GetBusinessObjectMethodsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBusinessObjectMethodsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBusinessObjectMethodsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void StartProcessWithDefaultsCompletedEventHandler(object sender, StartProcessWithDefaultsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class StartProcessWithDefaultsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal StartProcessWithDefaultsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void TEST_GetDataCompletedEventHandler(object sender, TEST_GetDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TEST_GetDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TEST_GetDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void TEST_GetDataFromReportLayoutCompletedEventHandler(object sender, TEST_GetDataFromReportLayoutCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TEST_GetDataFromReportLayoutCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TEST_GetDataFromReportLayoutCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void BuildFromClientXMLCompletedEventHandler(object sender, BuildFromClientXMLCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BuildFromClientXMLCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BuildFromClientXMLCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ImageConnectDeleteCompletedEventHandler(object sender, ImageConnectDeleteCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ImageConnectDeleteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ImageConnectDeleteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetOptionCompletedEventHandler(object sender, GetOptionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetOptionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetOptionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591