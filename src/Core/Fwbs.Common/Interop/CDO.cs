using System;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Threading;


namespace FWBS.Common
{
    /// <summary>
    /// A class of static methods for interacting with CDO.
    /// Used in service application and library application 
    /// </summary>
    public class CDO
	{
		#region Fields
		/// <summary>
		/// MAPI.Session CDO session object
		/// </summary>
		static object currentSession;
		/// <summary>
		/// empty type used to case a MAPI session type into
		/// </summary>
		static Type t;
		/// <summary>
		/// Flag to indicate if the MAPI session is currently logged on
		/// </summary>
		static bool loggedOn;
		
		const string OUTLOOK_PROPSETID = "2903020000000000C000000000000046";

		#endregion

		#region Properties
		
		/// <summary>
		/// boolean value to indicate if the session was logged on
		/// </summary>
		public static bool IsLoggedOn
		{
			get
			{
				return loggedOn;
			}
		}

	

		#endregion

		#region Methods
			
		/// <summary>
		/// Creates a MAPI session using the passed information
		/// relies on the application having full permission on the exchange server
		/// as it uses the profile info parameter which consists of username and servername
		/// no password is supplied but inherits the current user
		/// </summary>
		/// <param name="server">Exchange server name</param>
		/// <param name="mailbox">users mailbox</param>
		/// <returns>Reference to the created session. not currently used as methods are called on the class</returns>
		public static Object CreateNewSession(string server,string mailbox)
		{
			object profileinfo;
		
			profileinfo = server + "\n" + mailbox;
		
			//  Set apartment model
			//The thread will create and enter a single-threaded apartment
			Thread.CurrentThread.SetApartmentState(ApartmentState.STA);
		
			// Step 2 - Create instance
			t = Type.GetTypeFromProgID("MAPI.Session");
			if (t == null)
			{
				throw new ApplicationException(Global.GetResString("PROGIDNOTFOUND")); //Unable to find ProgID 'MAPI.Session'.  CDO.DLL needs to be registered to use Collaborative Data Objects
            }

            currentSession = Activator.CreateInstance(t);

			// Step 3 - Logon
			Object [] args = new Object[7];
			args[0] = Missing.Value;	// ProfileName
			args[1] = Missing.Value;	// ProfilePassword
			args[2] = false;	// ShowDialog
			args[3] = true;	// NewSession
			args[4] = Missing.Value;	// ParentWindow
			args[5] = Missing.Value;	// NoMail
			args[6] = profileinfo;	// ProfileInfo

			try
			{
				//logon to the session
				t.InvokeMember("Logon", BindingFlags.InvokeMethod, null, currentSession, args);
			
				//force an action upon the session to highlight any problems
				//the reason being that sometimes it will not error at logon but wait intil you try and perform some action
				//with the session
				object o = t.InvokeMember("Inbox",BindingFlags.GetProperty,null,currentSession,null);
				
				loggedOn = true;
			}
			catch (TargetInvocationException e)
			{
				loggedOn = false;
				if (e.InnerException.GetType() == typeof(COMException))
				{
					COMException ce = (COMException)e.InnerException;
					if(ce.ErrorCode == -2147221231) /* MAPI_E_LOGON_FAILED(80040111) */
					{
						//if we are in here it means the users mailbox could not be opened
						return null;
					}
					else
					{
						//if we get here it is an unexpected error so throw it up
						throw new ApplicationException(Global.GetResString("MAPIEXC") + " " + ce); //An exception was generated by MAPI. Details: 
                    }
                }
				else
				{
					throw new ApplicationException(Global.GetResString("LOGUNABLE")); //Unable to log on to the Exchange server with the chosen profile.  Please check your installation settings.
                }
            }
			catch (Exception e)
			{
				loggedOn = false;
				Exception eb = e.GetBaseException();
				string message = eb.Message;
				throw new ApplicationException(eb.Message);
				
			}
			
			return currentSession;
		}


		/// <summary>
		/// retrives a message from the current session bases d on the passed mapi id
		/// </summary>
		/// <param name="ID">MAPI EntryID</param>
		/// <returns>MAPI AppointmnetItem as Object</returns>
		public static Object GetMessage(string ID)
		{
			//variable to hold any error messages and info
			string msg = "";
			object [] args = new object[2];
			object appointment;
			
			try
			{
				if (IsLoggedOn)
				{
					
					args[0] = ID;	// Entry ID
					args[1] = Missing.Value;	// Store ID

					msg = Global.GetResString("ENTRYID") + " " + ID; //Entry ID:

                    msg += Global.GetResString("SESSIONCAP") + " " + currentSession.ToString(); //Session:

                    appointment = t.InvokeMember("GetMessage",BindingFlags.InvokeMethod,null,currentSession,args);  
									
					msg += Global.GetResString("MESSAGECAP") + " " + appointment.ToString(); //Message:
                    return appointment;
				}
				else
				{
					return null;
				}
			}
			catch (TargetInvocationException e)
			{
				//test if it was a com exception
				if (e.InnerException.GetType() == typeof(COMException))
				{
					COMException ce = (COMException)e.InnerException;
					//message not found assume already deleted
					if(ce.ErrorCode == -2147221233 ||   /* MAPI_E_NOT_FOUND */
						ce.ErrorCode == -2147220991)    /* MAPI_E_UNKNOWN_ENTRYID */
					{
						return null;
					}
					else
						throw ce;
				}
				else
					throw e;
			}
			catch(NullReferenceException nullex)
			{
				msg += Global.GetResString("EXCEPTIONCAP") + " " + nullex.Message + " " + Global.GetResString("SOURCECAP") + nullex.Source; //Exception: Source:
                throw new ApplicationException("CDO.GetMessage: " + msg);
			}
			
			catch (Exception ex)
			{
				//throw up the exception
				msg += " " + Global.GetResString("EXCEPTIONCAP") + " " + ex.Message; //Exception:
                Exception bas = ex.GetBaseException();
				throw new ApplicationException("CDO.GetMessage: " + msg);
			}
		}
		
		
		/// <summary>
		/// Deletes a message from the current session 
		/// </summary>
		/// <param name="ID">MAPI entryID of message to delete</param>
		/// <returns>True if successful or throws exception</returns>
		public static bool DeleteMessage(string ID)
		{
			//no error handling handle on client
			object apnt; // MAPI Appointment
			Object [] args = new Object[1];
		
			try
			{
				args[0] = true;

				apnt = GetMessage(ID);
				if (apnt!= null)
				{
					apnt.GetType().InvokeMember("Delete",BindingFlags.InvokeMethod,null,apnt,args);
					return true;
				}
				else //already deleted
					return true;
				
			}
			catch(Exception ex)
			{
				throw new ApplicationException(Global.GetResString("DELETEERR") + " " + ex.Message); //DeleteMessage: error occurred.. 
            }
        }

	
		/// <summary>
		/// Adds a new appointment object to the current session
		/// </summary>
		/// <param name="fields">Array of values to populate appointment with</param>
		/// <returns>New MAPI EntryID value</returns>
		public static string AddAppointment(Object[] fields)
		{
		
			object appFolder;	//MAPI.Folder
			object appnts;		//MAPI.Messages
			object appnt;		//MAPI.Message
			object appFields = null; 
			//MAPI.Fields appFields = null;
			object entryid = "";
			bool allday = false;
			Object [] args1 = new Object[1];
			Object [] args2= new Object[1];
			Object [] args3 = new Object[2];
			Object [] args4 = new Object[4];
			Type t_arg = Type.GetTypeFromProgID("MAPI.CdoDefaultFolderTypes.CdoDefaultFolderCalendar");
		
			args1[0] = t_arg;
		
			//if not logged on throw an exception
			if (! IsLoggedOn)
			{
				throw new ApplicationException(Global.GetResString("ADDAPPNOT")); //AddAppointment was unable to continue due to the fact that there is no logged on session.
            }

            try
			{

				//get the appointments folder
				appFolder = t.InvokeMember("GetDefaultFolder",BindingFlags.InvokeMethod,null,currentSession,args1);
		
				//get the messages collection from the appointments folder
				appnts = appFolder.GetType().InvokeMember("Messages",BindingFlags.GetProperty,null,appFolder,null);

				//create a new appointment
				appnt = appnts.GetType().InvokeMember("Add",BindingFlags.InvokeMethod,null,appnts,null);
				
				//if custom fields are being used 
				if(fields.Length > 7)
				{
					appFields = appnt.GetType().InvokeMember("Fields",BindingFlags.GetProperty,null,appnt,null);
					//populate known parts of arguments
					Type tp = Type.GetTypeFromProgID("MAPI.mapiFieldType.vbString");
					//SET THE VALUE OF THE OUTLOOK FIELDS
					args4[3] = OUTLOOK_PROPSETID;
				}
			
				for(int i = 0; i < fields.Length; i++)
				{
					string property = "";

					switch(i)
					{
						case 0:
							property = "AllDayEvent" ;
							allday  = (bool)fields[i];
							break;
						case 1:
							property = "StartTime" ;
							break;
						case 2:
							property = "EndTime" ;
							break;
						case 3:
							property = "Location" ;
							break;
						case 4:
							property = "Subject" ;
							break;
						case 5:
							property = "text" ;
							break;
						case 6:
							property = "ReminderSet" ;
							break;
						case 7:
							property = "ReminderMinutesBeforeStart" ;
							break;
						//from here they are custom user fields for the outlook appointment
						case 8:
							args4[0] = "APPID";
							args4[1] = 3; //LONG INTEGER
							args4[2] = FWBS.Common.ConvertDef.ToInt32(fields[i],-1);
							appFields.GetType().InvokeMember("Add",BindingFlags.InvokeMethod,null,appFields,args4);
							break;
						case 9:
							args4[0] = "ASSOCID";
							args4[1] = 3; //LONG INTEGER
							args4[2] = FWBS.Common.ConvertDef.ToInt32(fields[i],-1);
							appFields.GetType().InvokeMember("Add",BindingFlags.InvokeMethod,null,appFields,args4);
							break;
						case 10:
							args4[0] = "CLIENTID";
							args4[1] = 3; //LONG INTEGER
							args4[2] = FWBS.Common.ConvertDef.ToInt32(fields[i],-1);
							appFields.GetType().InvokeMember("Add",BindingFlags.InvokeMethod,null,appFields,args4);
							break;
						case 11:
							args4[0] = "COMPANYID";
							args4[1] = 3; //LONG INTEGER
							args4[2] = FWBS.Common.ConvertDef.ToInt32(fields[i],-1);
							appFields.GetType().InvokeMember("Add",BindingFlags.InvokeMethod,null,appFields,args4);
							break;
						case 12:
							args4[0] = "EDITION";
							args4[1] = 8; //STRING
							args4[2] = Convert.ToString(fields[i]);
							appFields.GetType().InvokeMember("Add",BindingFlags.InvokeMethod,null,appFields,args4);
							break;
						case 13:
							args4[0] = "FILEID";
							args4[1] = 3; //LONG INTEGER
							args4[2] = FWBS.Common.ConvertDef.ToInt32(fields[i],-1);
							appFields.GetType().InvokeMember("Add",BindingFlags.InvokeMethod,null,appFields,args4);
							break;
						case 14:
							args4[0] = "SERIALNO";
							args4[1] = 8; //STRING
							args4[2] = Convert.ToString(fields[i]);
							appFields.GetType().InvokeMember("Add",BindingFlags.InvokeMethod,null,appFields,args4);
							break;

					}
					
					//if one of the standard appointment fields update the value of the property
					if(i < 8)
					{
						args2[0] = fields[i];
						appnt.GetType().InvokeMember(property,BindingFlags.SetProperty,null,appnt,args2);
					}
				}
				
				//If appointment is all day we need to strip time elemets from the date or update will fail
				if(allday == true)
				{
					//capture start and end dates
					DateTime start = Convert.ToDateTime(fields[1]);
					DateTime end = Convert.ToDateTime(fields[2]);
					
					//strip time element from dates
					start = Convert.ToDateTime(start.ToShortDateString());
					end = Convert.ToDateTime(end.ToShortDateString());
					
					//update with these new values
					args2[0] = start;
					appnt.GetType().InvokeMember("StartTime",BindingFlags.SetProperty,null,appnt,args2);
					args2[0] = end;
					appnt.GetType().InvokeMember("EndTime",BindingFlags.SetProperty,null,appnt,args2);

					//finally set all day flag
					args2[0] = allday;
					appnt.GetType().InvokeMember("AllDayEvent",BindingFlags.SetProperty,null,appnt,args2);
				}

				//perform the update
				args3[0] = true;
				args3[1] = true;
				appnt.GetType().InvokeMember("Update",BindingFlags.InvokeMethod,null,appnt,args3);
			
				//get mapi entry id
				entryid = appnt.GetType().InvokeMember("ID",BindingFlags.GetProperty,null,appnt,null);
			
            
			}
			catch(Exception ex)
			{
				throw ex;
			}

			//return the entry id
			return Convert.ToString(entryid);
		}


        /// <summary>
        /// Locates an existing appointment and returns the Entry ID of it
        /// Make sure the fifeldname passed is unique for guaranteed results
        /// </summary>
        /// <param name="fieldname">Name of the property</param>
        /// <param name="searchval">value of the property</param>
        /// <returns>EntryID or empty string if cannot locate</returns>
        public static string LocateAppointment(string fieldname, object searchval)
		{
			object appFolder;	//MAPI.Folder
			object appnts;		//MAPI.Messages
			object appnt;		//MAPI.Message
			object appFields = null; //MAPI.Fields
			object entryid;			

			Type t_arg = Type.GetTypeFromProgID("MAPI.CdoDefaultFolderTypes.CdoDefaultFolderCalendar");
			
			if (! IsLoggedOn)
			{
				throw new ApplicationException(Global.GetResString("ADDAPPNOT")); //AddAppointment was unable to continue due to the fact that there is no logged on session.
            }

            try
			{
				//get the appointments folder
				appFolder = t.InvokeMember("GetDefaultFolder",BindingFlags.InvokeMethod,null,currentSession,new object[] {t_arg});
		
				//get the messages collection from the appointments folder
				appnts = appFolder.GetType().InvokeMember("Messages",BindingFlags.GetProperty,null,appFolder,null);
				
				// Get the first appointment by calling Getfirst on the collection
				appnt  = appnts.GetType().InvokeMember("GetFirst",BindingFlags.InvokeMethod,null,appnts,null);
				
				do
				{
					//Get the fields collection from this appointment
					appFields = appnt.GetType().InvokeMember("Fields",BindingFlags.GetProperty,null,appnt,null);
					
					//declare a variable for the field we are targetting
                    object fld = null;
					
                    //wrap in try catch because an error is thrown if the field does not exist
					try
					{
						fld = appFields.GetType().InvokeMember("Item",BindingFlags.GetProperty,null,appFields,new object[] {fieldname});
					}
					catch(Exception ex)
					{
						string s = ex.Message;
					}
					
					//test if we have a field
					if(fld!=null)
					{
						// see if the field value is the same as the passed search
						object val = fld.GetType().InvokeMember("Value",BindingFlags.GetProperty,null,fld,null);
						
						// Use the tostring method to check values direct comparison doesn't work
						if(val.ToString() == searchval.ToString())
						{
							//we have a match grab the entry ID and get out
							entryid = appnt.GetType().InvokeMember("ID",BindingFlags.GetProperty,null,appnt,null);
							return Convert.ToString(entryid);
						}

					}
					
					//if we are still here then get the next appointment
					appnt = appnts.GetType().InvokeMember("GetNext",BindingFlags.InvokeMethod,null,appnts,null);

				}while(appnt!=null);

			
			}
			catch(Exception ex)
			{
				//throw the exception up
				string msg = Global.GetResString("EXCEPTIONCAP") + " " + ex.Message; //Exception:
                throw new ApplicationException("CDO.LocateAppointment: " + msg);
						
			}
			return "";
		}


		/// <summary>
		/// Attempts to log onto session: not currently used
		/// </summary>
		/// <param name="ProfileInfo">Profile info object servername/mailbox</param>
		static void Retry(object ProfileInfo)
		{
			t.InvokeMember("Logoff", BindingFlags.InvokeMethod, null, currentSession, null);
			object[] args = new Object[7];
			args[0] = Missing.Value;			// ProfileName
			args[1] = Missing.Value;	// ProfilePassword
			args[2] = Missing.Value;	// ShowDialog
			args[3] = Missing.Value;	// NewSession
			args[4] = Missing.Value;	// ParentWindow
			args[5] = Missing.Value;	// NoMail
			args[6] = ProfileInfo;	// ProfileInfo
			t.InvokeMember("Logon", BindingFlags.InvokeMethod, null, currentSession, args);
		}

	
		/// <summary>
		/// Logs off the current session
		/// </summary>
		public static void Logoff()
		{
			try
			{
				if(loggedOn == true)
					t.InvokeMember("Logoff", BindingFlags.InvokeMethod, null, currentSession, null);
			
			}
			catch
			{}
			finally
			{
				if(currentSession != null)
				{
					int refCount = System.Runtime.InteropServices.Marshal.ReleaseComObject(currentSession);
			
					while (refCount > 0)
						refCount = System.Runtime.InteropServices.Marshal.ReleaseComObject(currentSession);
				
									
				}
			}
			loggedOn = false;
		}
		
		#endregion
	}
}