//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace FWBS.OMS.PostcodeAnywhere {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="LookupUKSoap", Namespace="PostcodeAnywhere2")]
    public partial class LookupUK : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback ByPostcodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback ByPostcode_DataSetOperationCompleted;
        
        private System.Threading.SendOrPostCallback ByPostcode_CombinedOperationCompleted;
        
        private System.Threading.SendOrPostCallback ByOutcodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback ByOutcode_DataSetOperationCompleted;
        
        private System.Threading.SendOrPostCallback ByOrganisationOperationCompleted;
        
        private System.Threading.SendOrPostCallback ByOrganisation_DataSetOperationCompleted;
        
        private System.Threading.SendOrPostCallback ByOrganisation_CombinedOperationCompleted;
        
        private System.Threading.SendOrPostCallback ByStreetOperationCompleted;
        
        private System.Threading.SendOrPostCallback ByStreet_DatasetOperationCompleted;
        
        private System.Threading.SendOrPostCallback ByStreet_CombinedOperationCompleted;
        
        private System.Threading.SendOrPostCallback ByBuildingOperationCompleted;
        
        private System.Threading.SendOrPostCallback ByBuilding_DatasetOperationCompleted;
        
        private System.Threading.SendOrPostCallback ByBuilding_CombinedOperationCompleted;
        
        private System.Threading.SendOrPostCallback ByStreetKeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback ByStreetKey_DataSetOperationCompleted;
        
        private System.Threading.SendOrPostCallback ByStreetKey_CombinedOperationCompleted;
        
        private System.Threading.SendOrPostCallback ByLocalityKeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback ByLocalityKey_DataSetOperationCompleted;
        
        private System.Threading.SendOrPostCallback FetchAddress_SimpleOperationCompleted;
        
        private System.Threading.SendOrPostCallback FetchAddressOperationCompleted;
        
        private System.Threading.SendOrPostCallback FastAddressOperationCompleted;
        
        private System.Threading.SendOrPostCallback FetchAddress_DataSetOperationCompleted;
        
        private System.Threading.SendOrPostCallback FastAddress_DataSetOperationCompleted;
        
        private System.Threading.SendOrPostCallback DistanceOperationCompleted;
        
        private System.Threading.SendOrPostCallback NearestOperationCompleted;
        
        private System.Threading.SendOrPostCallback Nearest_DataSetOperationCompleted;
        
        private System.Threading.SendOrPostCallback StoredNearestOperationCompleted;
        
        private System.Threading.SendOrPostCallback StoredNearest_DataSetOperationCompleted;
        
        private System.Threading.SendOrPostCallback NearestRadialOperationCompleted;
        
        private System.Threading.SendOrPostCallback NearestRadial_DataSetOperationCompleted;
        
        private System.Threading.SendOrPostCallback StoredNearestRadialOperationCompleted;
        
        private System.Threading.SendOrPostCallback StoredNearestRadial_DataSetOperationCompleted;
        
        private System.Threading.SendOrPostCallback ChangesOperationCompleted;
        
        private System.Threading.SendOrPostCallback Changes_DataSetOperationCompleted;
        
        private System.Threading.SendOrPostCallback CleanseOperationCompleted;
        
        private System.Threading.SendOrPostCallback Cleanse_DataSetOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public LookupUK() {
            this.Url = "http://services.postcodeanywhere.co.uk/uk/lookup.asmx";
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event ByPostcodeCompletedEventHandler ByPostcodeCompleted;
        
        /// <remarks/>
        public event ByPostcode_DataSetCompletedEventHandler ByPostcode_DataSetCompleted;
        
        /// <remarks/>
        public event ByPostcode_CombinedCompletedEventHandler ByPostcode_CombinedCompleted;
        
        /// <remarks/>
        public event ByOutcodeCompletedEventHandler ByOutcodeCompleted;
        
        /// <remarks/>
        public event ByOutcode_DataSetCompletedEventHandler ByOutcode_DataSetCompleted;
        
        /// <remarks/>
        public event ByOrganisationCompletedEventHandler ByOrganisationCompleted;
        
        /// <remarks/>
        public event ByOrganisation_DataSetCompletedEventHandler ByOrganisation_DataSetCompleted;
        
        /// <remarks/>
        public event ByOrganisation_CombinedCompletedEventHandler ByOrganisation_CombinedCompleted;
        
        /// <remarks/>
        public event ByStreetCompletedEventHandler ByStreetCompleted;
        
        /// <remarks/>
        public event ByStreet_DatasetCompletedEventHandler ByStreet_DatasetCompleted;
        
        /// <remarks/>
        public event ByStreet_CombinedCompletedEventHandler ByStreet_CombinedCompleted;
        
        /// <remarks/>
        public event ByBuildingCompletedEventHandler ByBuildingCompleted;
        
        /// <remarks/>
        public event ByBuilding_DatasetCompletedEventHandler ByBuilding_DatasetCompleted;
        
        /// <remarks/>
        public event ByBuilding_CombinedCompletedEventHandler ByBuilding_CombinedCompleted;
        
        /// <remarks/>
        public event ByStreetKeyCompletedEventHandler ByStreetKeyCompleted;
        
        /// <remarks/>
        public event ByStreetKey_DataSetCompletedEventHandler ByStreetKey_DataSetCompleted;
        
        /// <remarks/>
        public event ByStreetKey_CombinedCompletedEventHandler ByStreetKey_CombinedCompleted;
        
        /// <remarks/>
        public event ByLocalityKeyCompletedEventHandler ByLocalityKeyCompleted;
        
        /// <remarks/>
        public event ByLocalityKey_DataSetCompletedEventHandler ByLocalityKey_DataSetCompleted;
        
        /// <remarks/>
        public event FetchAddress_SimpleCompletedEventHandler FetchAddress_SimpleCompleted;
        
        /// <remarks/>
        public event FetchAddressCompletedEventHandler FetchAddressCompleted;
        
        /// <remarks/>
        public event FastAddressCompletedEventHandler FastAddressCompleted;
        
        /// <remarks/>
        public event FetchAddress_DataSetCompletedEventHandler FetchAddress_DataSetCompleted;
        
        /// <remarks/>
        public event FastAddress_DataSetCompletedEventHandler FastAddress_DataSetCompleted;
        
        /// <remarks/>
        public event DistanceCompletedEventHandler DistanceCompleted;
        
        /// <remarks/>
        public event NearestCompletedEventHandler NearestCompleted;
        
        /// <remarks/>
        public event Nearest_DataSetCompletedEventHandler Nearest_DataSetCompleted;
        
        /// <remarks/>
        public event StoredNearestCompletedEventHandler StoredNearestCompleted;
        
        /// <remarks/>
        public event StoredNearest_DataSetCompletedEventHandler StoredNearest_DataSetCompleted;
        
        /// <remarks/>
        public event NearestRadialCompletedEventHandler NearestRadialCompleted;
        
        /// <remarks/>
        public event NearestRadial_DataSetCompletedEventHandler NearestRadial_DataSetCompleted;
        
        /// <remarks/>
        public event StoredNearestRadialCompletedEventHandler StoredNearestRadialCompleted;
        
        /// <remarks/>
        public event StoredNearestRadial_DataSetCompletedEventHandler StoredNearestRadial_DataSetCompleted;
        
        /// <remarks/>
        public event ChangesCompletedEventHandler ChangesCompleted;
        
        /// <remarks/>
        public event Changes_DataSetCompletedEventHandler Changes_DataSetCompleted;
        
        /// <remarks/>
        public event CleanseCompletedEventHandler CleanseCompleted;
        
        /// <remarks/>
        public event Cleanse_DataSetCompletedEventHandler Cleanse_DataSetCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("PostcodeAnywhere2/ByPostcode", RequestNamespace="PostcodeAnywhere2", ResponseNamespace="PostcodeAnywhere2", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public InterimResults ByPostcode(string Postcode, string AccountCode, string LicenseKey, string MachineId) {
            object[] results = this.Invoke("ByPostcode", new object[] {
                        Postcode,
                        AccountCode,
                        LicenseKey,
                        MachineId});
            return ((InterimResults)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginByPostcode(string Postcode, string AccountCode, string LicenseKey, string MachineId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ByPostcode", new object[] {
                        Postcode,
                        AccountCode,
                        LicenseKey,
                        MachineId}, callback, asyncState);
        }
        
        /// <remarks/>
        public InterimResults EndByPostcode(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((InterimResults)(results[0]));
        }
        
        /// <remarks/>
        public void ByPostcodeAsync(string Postcode, string AccountCode, string LicenseKey, string MachineId) {
            this.ByPostcodeAsync(Postcode, AccountCode, LicenseKey, MachineId, null);
        }
        
        /// <remarks/>
        public void ByPostcodeAsync(string Postcode, string AccountCode, string LicenseKey, string MachineId, object userState) {
            if ((this.ByPostcodeOperationCompleted == null)) {
                this.ByPostcodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnByPostcodeOperationCompleted);
            }
            this.InvokeAsync("ByPostcode", new object[] {
                        Postcode,
                        AccountCode,
                        LicenseKey,
                        MachineId}, this.ByPostcodeOperationCompleted, userState);
        }
        
        private void OnByPostcodeOperationCompleted(object arg) {
            if ((this.ByPostcodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ByPostcodeCompleted(this, new ByPostcodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("PostcodeAnywhere2/ByPostcode_DataSet", RequestNamespace="PostcodeAnywhere2", ResponseNamespace="PostcodeAnywhere2", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ByPostcode_DataSet(string Postcode, string AccountCode, string LicenseKey, string MachineId) {
            object[] results = this.Invoke("ByPostcode_DataSet", new object[] {
                        Postcode,
                        AccountCode,
                        LicenseKey,
                        MachineId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginByPostcode_DataSet(string Postcode, string AccountCode, string LicenseKey, string MachineId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ByPostcode_DataSet", new object[] {
                        Postcode,
                        AccountCode,
                        LicenseKey,
                        MachineId}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataSet EndByPostcode_DataSet(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ByPostcode_DataSetAsync(string Postcode, string AccountCode, string LicenseKey, string MachineId) {
            this.ByPostcode_DataSetAsync(Postcode, AccountCode, LicenseKey, MachineId, null);
        }
        
        /// <remarks/>
        public void ByPostcode_DataSetAsync(string Postcode, string AccountCode, string LicenseKey, string MachineId, object userState) {
            if ((this.ByPostcode_DataSetOperationCompleted == null)) {
                this.ByPostcode_DataSetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnByPostcode_DataSetOperationCompleted);
            }
            this.InvokeAsync("ByPostcode_DataSet", new object[] {
                        Postcode,
                        AccountCode,
                        LicenseKey,
                        MachineId}, this.ByPostcode_DataSetOperationCompleted, userState);
        }
        
        private void OnByPostcode_DataSetOperationCompleted(object arg) {
            if ((this.ByPostcode_DataSetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ByPostcode_DataSetCompleted(this, new ByPostcode_DataSetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("PostcodeAnywhere2/ByPostcode_Combined", RequestNamespace="PostcodeAnywhere2", ResponseNamespace="PostcodeAnywhere2", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CombinedResults ByPostcode_Combined(string Postcode, string AccountCode, string LicenseKey, string MachineId, enLanguage Language, enContentType ContentType) {
            object[] results = this.Invoke("ByPostcode_Combined", new object[] {
                        Postcode,
                        AccountCode,
                        LicenseKey,
                        MachineId,
                        Language,
                        ContentType});
            return ((CombinedResults)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginByPostcode_Combined(string Postcode, string AccountCode, string LicenseKey, string MachineId, enLanguage Language, enContentType ContentType, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ByPostcode_Combined", new object[] {
                        Postcode,
                        AccountCode,
                        LicenseKey,
                        MachineId,
                        Language,
                        ContentType}, callback, asyncState);
        }
        
        /// <remarks/>
        public CombinedResults EndByPostcode_Combined(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((CombinedResults)(results[0]));
        }
        
        /// <remarks/>
        public void ByPostcode_CombinedAsync(string Postcode, string AccountCode, string LicenseKey, string MachineId, enLanguage Language, enContentType ContentType) {
            this.ByPostcode_CombinedAsync(Postcode, AccountCode, LicenseKey, MachineId, Language, ContentType, null);
        }
        
        /// <remarks/>
        public void ByPostcode_CombinedAsync(string Postcode, string AccountCode, string LicenseKey, string MachineId, enLanguage Language, enContentType ContentType, object userState) {
            if ((this.ByPostcode_CombinedOperationCompleted == null)) {
                this.ByPostcode_CombinedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnByPostcode_CombinedOperationCompleted);
            }
            this.InvokeAsync("ByPostcode_Combined", new object[] {
                        Postcode,
                        AccountCode,
                        LicenseKey,
                        MachineId,
                        Language,
                        ContentType}, this.ByPostcode_CombinedOperationCompleted, userState);
        }
        
        private void OnByPostcode_CombinedOperationCompleted(object arg) {
            if ((this.ByPostcode_CombinedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ByPostcode_CombinedCompleted(this, new ByPostcode_CombinedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("PostcodeAnywhere2/ByOutcode", RequestNamespace="PostcodeAnywhere2", ResponseNamespace="PostcodeAnywhere2", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public InterimResults ByOutcode(string Outcode, string AccountCode, string LicenseKey, string MachineId) {
            object[] results = this.Invoke("ByOutcode", new object[] {
                        Outcode,
                        AccountCode,
                        LicenseKey,
                        MachineId});
            return ((InterimResults)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginByOutcode(string Outcode, string AccountCode, string LicenseKey, string MachineId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ByOutcode", new object[] {
                        Outcode,
                        AccountCode,
                        LicenseKey,
                        MachineId}, callback, asyncState);
        }
        
        /// <remarks/>
        public InterimResults EndByOutcode(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((InterimResults)(results[0]));
        }
        
        /// <remarks/>
        public void ByOutcodeAsync(string Outcode, string AccountCode, string LicenseKey, string MachineId) {
            this.ByOutcodeAsync(Outcode, AccountCode, LicenseKey, MachineId, null);
        }
        
        /// <remarks/>
        public void ByOutcodeAsync(string Outcode, string AccountCode, string LicenseKey, string MachineId, object userState) {
            if ((this.ByOutcodeOperationCompleted == null)) {
                this.ByOutcodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnByOutcodeOperationCompleted);
            }
            this.InvokeAsync("ByOutcode", new object[] {
                        Outcode,
                        AccountCode,
                        LicenseKey,
                        MachineId}, this.ByOutcodeOperationCompleted, userState);
        }
        
        private void OnByOutcodeOperationCompleted(object arg) {
            if ((this.ByOutcodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ByOutcodeCompleted(this, new ByOutcodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("PostcodeAnywhere2/ByOutcode_DataSet", RequestNamespace="PostcodeAnywhere2", ResponseNamespace="PostcodeAnywhere2", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ByOutcode_DataSet(string Outcode, string AccountCode, string LicenseKey, string MachineId) {
            object[] results = this.Invoke("ByOutcode_DataSet", new object[] {
                        Outcode,
                        AccountCode,
                        LicenseKey,
                        MachineId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginByOutcode_DataSet(string Outcode, string AccountCode, string LicenseKey, string MachineId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ByOutcode_DataSet", new object[] {
                        Outcode,
                        AccountCode,
                        LicenseKey,
                        MachineId}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataSet EndByOutcode_DataSet(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ByOutcode_DataSetAsync(string Outcode, string AccountCode, string LicenseKey, string MachineId) {
            this.ByOutcode_DataSetAsync(Outcode, AccountCode, LicenseKey, MachineId, null);
        }
        
        /// <remarks/>
        public void ByOutcode_DataSetAsync(string Outcode, string AccountCode, string LicenseKey, string MachineId, object userState) {
            if ((this.ByOutcode_DataSetOperationCompleted == null)) {
                this.ByOutcode_DataSetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnByOutcode_DataSetOperationCompleted);
            }
            this.InvokeAsync("ByOutcode_DataSet", new object[] {
                        Outcode,
                        AccountCode,
                        LicenseKey,
                        MachineId}, this.ByOutcode_DataSetOperationCompleted, userState);
        }
        
        private void OnByOutcode_DataSetOperationCompleted(object arg) {
            if ((this.ByOutcode_DataSetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ByOutcode_DataSetCompleted(this, new ByOutcode_DataSetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("PostcodeAnywhere2/ByOrganisation", RequestNamespace="PostcodeAnywhere2", ResponseNamespace="PostcodeAnywhere2", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public InterimResults ByOrganisation(string Organisation, string Town, bool Fuzzy, string AccountCode, string LicenseKey, string MachineId) {
            object[] results = this.Invoke("ByOrganisation", new object[] {
                        Organisation,
                        Town,
                        Fuzzy,
                        AccountCode,
                        LicenseKey,
                        MachineId});
            return ((InterimResults)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginByOrganisation(string Organisation, string Town, bool Fuzzy, string AccountCode, string LicenseKey, string MachineId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ByOrganisation", new object[] {
                        Organisation,
                        Town,
                        Fuzzy,
                        AccountCode,
                        LicenseKey,
                        MachineId}, callback, asyncState);
        }
        
        /// <remarks/>
        public InterimResults EndByOrganisation(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((InterimResults)(results[0]));
        }
        
        /// <remarks/>
        public void ByOrganisationAsync(string Organisation, string Town, bool Fuzzy, string AccountCode, string LicenseKey, string MachineId) {
            this.ByOrganisationAsync(Organisation, Town, Fuzzy, AccountCode, LicenseKey, MachineId, null);
        }
        
        /// <remarks/>
        public void ByOrganisationAsync(string Organisation, string Town, bool Fuzzy, string AccountCode, string LicenseKey, string MachineId, object userState) {
            if ((this.ByOrganisationOperationCompleted == null)) {
                this.ByOrganisationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnByOrganisationOperationCompleted);
            }
            this.InvokeAsync("ByOrganisation", new object[] {
                        Organisation,
                        Town,
                        Fuzzy,
                        AccountCode,
                        LicenseKey,
                        MachineId}, this.ByOrganisationOperationCompleted, userState);
        }
        
        private void OnByOrganisationOperationCompleted(object arg) {
            if ((this.ByOrganisationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ByOrganisationCompleted(this, new ByOrganisationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("PostcodeAnywhere2/ByOrganisation_DataSet", RequestNamespace="PostcodeAnywhere2", ResponseNamespace="PostcodeAnywhere2", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ByOrganisation_DataSet(string Organisation, string Town, bool Fuzzy, string AccountCode, string LicenseKey, string MachineId) {
            object[] results = this.Invoke("ByOrganisation_DataSet", new object[] {
                        Organisation,
                        Town,
                        Fuzzy,
                        AccountCode,
                        LicenseKey,
                        MachineId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginByOrganisation_DataSet(string Organisation, string Town, bool Fuzzy, string AccountCode, string LicenseKey, string MachineId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ByOrganisation_DataSet", new object[] {
                        Organisation,
                        Town,
                        Fuzzy,
                        AccountCode,
                        LicenseKey,
                        MachineId}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataSet EndByOrganisation_DataSet(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ByOrganisation_DataSetAsync(string Organisation, string Town, bool Fuzzy, string AccountCode, string LicenseKey, string MachineId) {
            this.ByOrganisation_DataSetAsync(Organisation, Town, Fuzzy, AccountCode, LicenseKey, MachineId, null);
        }
        
        /// <remarks/>
        public void ByOrganisation_DataSetAsync(string Organisation, string Town, bool Fuzzy, string AccountCode, string LicenseKey, string MachineId, object userState) {
            if ((this.ByOrganisation_DataSetOperationCompleted == null)) {
                this.ByOrganisation_DataSetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnByOrganisation_DataSetOperationCompleted);
            }
            this.InvokeAsync("ByOrganisation_DataSet", new object[] {
                        Organisation,
                        Town,
                        Fuzzy,
                        AccountCode,
                        LicenseKey,
                        MachineId}, this.ByOrganisation_DataSetOperationCompleted, userState);
        }
        
        private void OnByOrganisation_DataSetOperationCompleted(object arg) {
            if ((this.ByOrganisation_DataSetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ByOrganisation_DataSetCompleted(this, new ByOrganisation_DataSetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("PostcodeAnywhere2/ByOrganisation_Combined", RequestNamespace="PostcodeAnywhere2", ResponseNamespace="PostcodeAnywhere2", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CombinedResults ByOrganisation_Combined(string Organisation, string Town, bool Fuzzy, string AccountCode, string LicenseKey, string MachineId, enLanguage Language, enContentType ContentType) {
            object[] results = this.Invoke("ByOrganisation_Combined", new object[] {
                        Organisation,
                        Town,
                        Fuzzy,
                        AccountCode,
                        LicenseKey,
                        MachineId,
                        Language,
                        ContentType});
            return ((CombinedResults)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginByOrganisation_Combined(string Organisation, string Town, bool Fuzzy, string AccountCode, string LicenseKey, string MachineId, enLanguage Language, enContentType ContentType, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ByOrganisation_Combined", new object[] {
                        Organisation,
                        Town,
                        Fuzzy,
                        AccountCode,
                        LicenseKey,
                        MachineId,
                        Language,
                        ContentType}, callback, asyncState);
        }
        
        /// <remarks/>
        public CombinedResults EndByOrganisation_Combined(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((CombinedResults)(results[0]));
        }
        
        /// <remarks/>
        public void ByOrganisation_CombinedAsync(string Organisation, string Town, bool Fuzzy, string AccountCode, string LicenseKey, string MachineId, enLanguage Language, enContentType ContentType) {
            this.ByOrganisation_CombinedAsync(Organisation, Town, Fuzzy, AccountCode, LicenseKey, MachineId, Language, ContentType, null);
        }
        
        /// <remarks/>
        public void ByOrganisation_CombinedAsync(string Organisation, string Town, bool Fuzzy, string AccountCode, string LicenseKey, string MachineId, enLanguage Language, enContentType ContentType, object userState) {
            if ((this.ByOrganisation_CombinedOperationCompleted == null)) {
                this.ByOrganisation_CombinedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnByOrganisation_CombinedOperationCompleted);
            }
            this.InvokeAsync("ByOrganisation_Combined", new object[] {
                        Organisation,
                        Town,
                        Fuzzy,
                        AccountCode,
                        LicenseKey,
                        MachineId,
                        Language,
                        ContentType}, this.ByOrganisation_CombinedOperationCompleted, userState);
        }
        
        private void OnByOrganisation_CombinedOperationCompleted(object arg) {
            if ((this.ByOrganisation_CombinedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ByOrganisation_CombinedCompleted(this, new ByOrganisation_CombinedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("PostcodeAnywhere2/ByStreet", RequestNamespace="PostcodeAnywhere2", ResponseNamespace="PostcodeAnywhere2", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public InterimResults ByStreet(string Street, string Town, bool Fuzzy, string AccountCode, string LicenseKey, string MachineId) {
            object[] results = this.Invoke("ByStreet", new object[] {
                        Street,
                        Town,
                        Fuzzy,
                        AccountCode,
                        LicenseKey,
                        MachineId});
            return ((InterimResults)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginByStreet(string Street, string Town, bool Fuzzy, string AccountCode, string LicenseKey, string MachineId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ByStreet", new object[] {
                        Street,
                        Town,
                        Fuzzy,
                        AccountCode,
                        LicenseKey,
                        MachineId}, callback, asyncState);
        }
        
        /// <remarks/>
        public InterimResults EndByStreet(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((InterimResults)(results[0]));
        }
        
        /// <remarks/>
        public void ByStreetAsync(string Street, string Town, bool Fuzzy, string AccountCode, string LicenseKey, string MachineId) {
            this.ByStreetAsync(Street, Town, Fuzzy, AccountCode, LicenseKey, MachineId, null);
        }
        
        /// <remarks/>
        public void ByStreetAsync(string Street, string Town, bool Fuzzy, string AccountCode, string LicenseKey, string MachineId, object userState) {
            if ((this.ByStreetOperationCompleted == null)) {
                this.ByStreetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnByStreetOperationCompleted);
            }
            this.InvokeAsync("ByStreet", new object[] {
                        Street,
                        Town,
                        Fuzzy,
                        AccountCode,
                        LicenseKey,
                        MachineId}, this.ByStreetOperationCompleted, userState);
        }
        
        private void OnByStreetOperationCompleted(object arg) {
            if ((this.ByStreetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ByStreetCompleted(this, new ByStreetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("PostcodeAnywhere2/ByStreet_Dataset", RequestNamespace="PostcodeAnywhere2", ResponseNamespace="PostcodeAnywhere2", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ByStreet_Dataset(string Street, string Town, bool Fuzzy, string AccountCode, string LicenseKey, string MachineId) {
            object[] results = this.Invoke("ByStreet_Dataset", new object[] {
                        Street,
                        Town,
                        Fuzzy,
                        AccountCode,
                        LicenseKey,
                        MachineId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginByStreet_Dataset(string Street, string Town, bool Fuzzy, string AccountCode, string LicenseKey, string MachineId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ByStreet_Dataset", new object[] {
                        Street,
                        Town,
                        Fuzzy,
                        AccountCode,
                        LicenseKey,
                        MachineId}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataSet EndByStreet_Dataset(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ByStreet_DatasetAsync(string Street, string Town, bool Fuzzy, string AccountCode, string LicenseKey, string MachineId) {
            this.ByStreet_DatasetAsync(Street, Town, Fuzzy, AccountCode, LicenseKey, MachineId, null);
        }
        
        /// <remarks/>
        public void ByStreet_DatasetAsync(string Street, string Town, bool Fuzzy, string AccountCode, string LicenseKey, string MachineId, object userState) {
            if ((this.ByStreet_DatasetOperationCompleted == null)) {
                this.ByStreet_DatasetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnByStreet_DatasetOperationCompleted);
            }
            this.InvokeAsync("ByStreet_Dataset", new object[] {
                        Street,
                        Town,
                        Fuzzy,
                        AccountCode,
                        LicenseKey,
                        MachineId}, this.ByStreet_DatasetOperationCompleted, userState);
        }
        
        private void OnByStreet_DatasetOperationCompleted(object arg) {
            if ((this.ByStreet_DatasetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ByStreet_DatasetCompleted(this, new ByStreet_DatasetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("PostcodeAnywhere2/ByStreet_Combined", RequestNamespace="PostcodeAnywhere2", ResponseNamespace="PostcodeAnywhere2", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CombinedResults ByStreet_Combined(string Street, string Town, bool Fuzzy, string AccountCode, string LicenseKey, string MachineId, enLanguage Language, enContentType ContentType) {
            object[] results = this.Invoke("ByStreet_Combined", new object[] {
                        Street,
                        Town,
                        Fuzzy,
                        AccountCode,
                        LicenseKey,
                        MachineId,
                        Language,
                        ContentType});
            return ((CombinedResults)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginByStreet_Combined(string Street, string Town, bool Fuzzy, string AccountCode, string LicenseKey, string MachineId, enLanguage Language, enContentType ContentType, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ByStreet_Combined", new object[] {
                        Street,
                        Town,
                        Fuzzy,
                        AccountCode,
                        LicenseKey,
                        MachineId,
                        Language,
                        ContentType}, callback, asyncState);
        }
        
        /// <remarks/>
        public CombinedResults EndByStreet_Combined(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((CombinedResults)(results[0]));
        }
        
        /// <remarks/>
        public void ByStreet_CombinedAsync(string Street, string Town, bool Fuzzy, string AccountCode, string LicenseKey, string MachineId, enLanguage Language, enContentType ContentType) {
            this.ByStreet_CombinedAsync(Street, Town, Fuzzy, AccountCode, LicenseKey, MachineId, Language, ContentType, null);
        }
        
        /// <remarks/>
        public void ByStreet_CombinedAsync(string Street, string Town, bool Fuzzy, string AccountCode, string LicenseKey, string MachineId, enLanguage Language, enContentType ContentType, object userState) {
            if ((this.ByStreet_CombinedOperationCompleted == null)) {
                this.ByStreet_CombinedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnByStreet_CombinedOperationCompleted);
            }
            this.InvokeAsync("ByStreet_Combined", new object[] {
                        Street,
                        Town,
                        Fuzzy,
                        AccountCode,
                        LicenseKey,
                        MachineId,
                        Language,
                        ContentType}, this.ByStreet_CombinedOperationCompleted, userState);
        }
        
        private void OnByStreet_CombinedOperationCompleted(object arg) {
            if ((this.ByStreet_CombinedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ByStreet_CombinedCompleted(this, new ByStreet_CombinedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("PostcodeAnywhere2/ByBuilding", RequestNamespace="PostcodeAnywhere2", ResponseNamespace="PostcodeAnywhere2", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public InterimResults ByBuilding(string Building, string Town, bool JustBuildings, string AccountCode, string LicenseKey, string MachineId) {
            object[] results = this.Invoke("ByBuilding", new object[] {
                        Building,
                        Town,
                        JustBuildings,
                        AccountCode,
                        LicenseKey,
                        MachineId});
            return ((InterimResults)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginByBuilding(string Building, string Town, bool JustBuildings, string AccountCode, string LicenseKey, string MachineId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ByBuilding", new object[] {
                        Building,
                        Town,
                        JustBuildings,
                        AccountCode,
                        LicenseKey,
                        MachineId}, callback, asyncState);
        }
        
        /// <remarks/>
        public InterimResults EndByBuilding(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((InterimResults)(results[0]));
        }
        
        /// <remarks/>
        public void ByBuildingAsync(string Building, string Town, bool JustBuildings, string AccountCode, string LicenseKey, string MachineId) {
            this.ByBuildingAsync(Building, Town, JustBuildings, AccountCode, LicenseKey, MachineId, null);
        }
        
        /// <remarks/>
        public void ByBuildingAsync(string Building, string Town, bool JustBuildings, string AccountCode, string LicenseKey, string MachineId, object userState) {
            if ((this.ByBuildingOperationCompleted == null)) {
                this.ByBuildingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnByBuildingOperationCompleted);
            }
            this.InvokeAsync("ByBuilding", new object[] {
                        Building,
                        Town,
                        JustBuildings,
                        AccountCode,
                        LicenseKey,
                        MachineId}, this.ByBuildingOperationCompleted, userState);
        }
        
        private void OnByBuildingOperationCompleted(object arg) {
            if ((this.ByBuildingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ByBuildingCompleted(this, new ByBuildingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("PostcodeAnywhere2/ByBuilding_Dataset", RequestNamespace="PostcodeAnywhere2", ResponseNamespace="PostcodeAnywhere2", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ByBuilding_Dataset(string Building, bool JustBuildings, string Town, string AccountCode, string LicenseKey, string MachineId) {
            object[] results = this.Invoke("ByBuilding_Dataset", new object[] {
                        Building,
                        JustBuildings,
                        Town,
                        AccountCode,
                        LicenseKey,
                        MachineId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginByBuilding_Dataset(string Building, bool JustBuildings, string Town, string AccountCode, string LicenseKey, string MachineId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ByBuilding_Dataset", new object[] {
                        Building,
                        JustBuildings,
                        Town,
                        AccountCode,
                        LicenseKey,
                        MachineId}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataSet EndByBuilding_Dataset(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ByBuilding_DatasetAsync(string Building, bool JustBuildings, string Town, string AccountCode, string LicenseKey, string MachineId) {
            this.ByBuilding_DatasetAsync(Building, JustBuildings, Town, AccountCode, LicenseKey, MachineId, null);
        }
        
        /// <remarks/>
        public void ByBuilding_DatasetAsync(string Building, bool JustBuildings, string Town, string AccountCode, string LicenseKey, string MachineId, object userState) {
            if ((this.ByBuilding_DatasetOperationCompleted == null)) {
                this.ByBuilding_DatasetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnByBuilding_DatasetOperationCompleted);
            }
            this.InvokeAsync("ByBuilding_Dataset", new object[] {
                        Building,
                        JustBuildings,
                        Town,
                        AccountCode,
                        LicenseKey,
                        MachineId}, this.ByBuilding_DatasetOperationCompleted, userState);
        }
        
        private void OnByBuilding_DatasetOperationCompleted(object arg) {
            if ((this.ByBuilding_DatasetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ByBuilding_DatasetCompleted(this, new ByBuilding_DatasetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("PostcodeAnywhere2/ByBuilding_Combined", RequestNamespace="PostcodeAnywhere2", ResponseNamespace="PostcodeAnywhere2", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CombinedResults ByBuilding_Combined(string Building, string Town, bool JustBuildings, string AccountCode, string LicenseKey, string MachineId, enLanguage Language, enContentType ContentType) {
            object[] results = this.Invoke("ByBuilding_Combined", new object[] {
                        Building,
                        Town,
                        JustBuildings,
                        AccountCode,
                        LicenseKey,
                        MachineId,
                        Language,
                        ContentType});
            return ((CombinedResults)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginByBuilding_Combined(string Building, string Town, bool JustBuildings, string AccountCode, string LicenseKey, string MachineId, enLanguage Language, enContentType ContentType, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ByBuilding_Combined", new object[] {
                        Building,
                        Town,
                        JustBuildings,
                        AccountCode,
                        LicenseKey,
                        MachineId,
                        Language,
                        ContentType}, callback, asyncState);
        }
        
        /// <remarks/>
        public CombinedResults EndByBuilding_Combined(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((CombinedResults)(results[0]));
        }
        
        /// <remarks/>
        public void ByBuilding_CombinedAsync(string Building, string Town, bool JustBuildings, string AccountCode, string LicenseKey, string MachineId, enLanguage Language, enContentType ContentType) {
            this.ByBuilding_CombinedAsync(Building, Town, JustBuildings, AccountCode, LicenseKey, MachineId, Language, ContentType, null);
        }
        
        /// <remarks/>
        public void ByBuilding_CombinedAsync(string Building, string Town, bool JustBuildings, string AccountCode, string LicenseKey, string MachineId, enLanguage Language, enContentType ContentType, object userState) {
            if ((this.ByBuilding_CombinedOperationCompleted == null)) {
                this.ByBuilding_CombinedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnByBuilding_CombinedOperationCompleted);
            }
            this.InvokeAsync("ByBuilding_Combined", new object[] {
                        Building,
                        Town,
                        JustBuildings,
                        AccountCode,
                        LicenseKey,
                        MachineId,
                        Language,
                        ContentType}, this.ByBuilding_CombinedOperationCompleted, userState);
        }
        
        private void OnByBuilding_CombinedOperationCompleted(object arg) {
            if ((this.ByBuilding_CombinedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ByBuilding_CombinedCompleted(this, new ByBuilding_CombinedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("PostcodeAnywhere2/ByStreetKey", RequestNamespace="PostcodeAnywhere2", ResponseNamespace="PostcodeAnywhere2", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public InterimResults ByStreetKey(string StreetKey, string AccountCode, string LicenseKey, string MachineId) {
            object[] results = this.Invoke("ByStreetKey", new object[] {
                        StreetKey,
                        AccountCode,
                        LicenseKey,
                        MachineId});
            return ((InterimResults)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginByStreetKey(string StreetKey, string AccountCode, string LicenseKey, string MachineId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ByStreetKey", new object[] {
                        StreetKey,
                        AccountCode,
                        LicenseKey,
                        MachineId}, callback, asyncState);
        }
        
        /// <remarks/>
        public InterimResults EndByStreetKey(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((InterimResults)(results[0]));
        }
        
        /// <remarks/>
        public void ByStreetKeyAsync(string StreetKey, string AccountCode, string LicenseKey, string MachineId) {
            this.ByStreetKeyAsync(StreetKey, AccountCode, LicenseKey, MachineId, null);
        }
        
        /// <remarks/>
        public void ByStreetKeyAsync(string StreetKey, string AccountCode, string LicenseKey, string MachineId, object userState) {
            if ((this.ByStreetKeyOperationCompleted == null)) {
                this.ByStreetKeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnByStreetKeyOperationCompleted);
            }
            this.InvokeAsync("ByStreetKey", new object[] {
                        StreetKey,
                        AccountCode,
                        LicenseKey,
                        MachineId}, this.ByStreetKeyOperationCompleted, userState);
        }
        
        private void OnByStreetKeyOperationCompleted(object arg) {
            if ((this.ByStreetKeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ByStreetKeyCompleted(this, new ByStreetKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("PostcodeAnywhere2/ByStreetKey_DataSet", RequestNamespace="PostcodeAnywhere2", ResponseNamespace="PostcodeAnywhere2", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ByStreetKey_DataSet(string StreetKey, string AccountCode, string LicenseKey, string MachineId) {
            object[] results = this.Invoke("ByStreetKey_DataSet", new object[] {
                        StreetKey,
                        AccountCode,
                        LicenseKey,
                        MachineId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginByStreetKey_DataSet(string StreetKey, string AccountCode, string LicenseKey, string MachineId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ByStreetKey_DataSet", new object[] {
                        StreetKey,
                        AccountCode,
                        LicenseKey,
                        MachineId}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataSet EndByStreetKey_DataSet(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ByStreetKey_DataSetAsync(string StreetKey, string AccountCode, string LicenseKey, string MachineId) {
            this.ByStreetKey_DataSetAsync(StreetKey, AccountCode, LicenseKey, MachineId, null);
        }
        
        /// <remarks/>
        public void ByStreetKey_DataSetAsync(string StreetKey, string AccountCode, string LicenseKey, string MachineId, object userState) {
            if ((this.ByStreetKey_DataSetOperationCompleted == null)) {
                this.ByStreetKey_DataSetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnByStreetKey_DataSetOperationCompleted);
            }
            this.InvokeAsync("ByStreetKey_DataSet", new object[] {
                        StreetKey,
                        AccountCode,
                        LicenseKey,
                        MachineId}, this.ByStreetKey_DataSetOperationCompleted, userState);
        }
        
        private void OnByStreetKey_DataSetOperationCompleted(object arg) {
            if ((this.ByStreetKey_DataSetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ByStreetKey_DataSetCompleted(this, new ByStreetKey_DataSetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("PostcodeAnywhere2/ByStreetKey_Combined", RequestNamespace="PostcodeAnywhere2", ResponseNamespace="PostcodeAnywhere2", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CombinedResults ByStreetKey_Combined(string StreetKey, string AccountCode, string LicenseKey, string MachineId, enLanguage Language, enContentType ContentType) {
            object[] results = this.Invoke("ByStreetKey_Combined", new object[] {
                        StreetKey,
                        AccountCode,
                        LicenseKey,
                        MachineId,
                        Language,
                        ContentType});
            return ((CombinedResults)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginByStreetKey_Combined(string StreetKey, string AccountCode, string LicenseKey, string MachineId, enLanguage Language, enContentType ContentType, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ByStreetKey_Combined", new object[] {
                        StreetKey,
                        AccountCode,
                        LicenseKey,
                        MachineId,
                        Language,
                        ContentType}, callback, asyncState);
        }
        
        /// <remarks/>
        public CombinedResults EndByStreetKey_Combined(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((CombinedResults)(results[0]));
        }
        
        /// <remarks/>
        public void ByStreetKey_CombinedAsync(string StreetKey, string AccountCode, string LicenseKey, string MachineId, enLanguage Language, enContentType ContentType) {
            this.ByStreetKey_CombinedAsync(StreetKey, AccountCode, LicenseKey, MachineId, Language, ContentType, null);
        }
        
        /// <remarks/>
        public void ByStreetKey_CombinedAsync(string StreetKey, string AccountCode, string LicenseKey, string MachineId, enLanguage Language, enContentType ContentType, object userState) {
            if ((this.ByStreetKey_CombinedOperationCompleted == null)) {
                this.ByStreetKey_CombinedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnByStreetKey_CombinedOperationCompleted);
            }
            this.InvokeAsync("ByStreetKey_Combined", new object[] {
                        StreetKey,
                        AccountCode,
                        LicenseKey,
                        MachineId,
                        Language,
                        ContentType}, this.ByStreetKey_CombinedOperationCompleted, userState);
        }
        
        private void OnByStreetKey_CombinedOperationCompleted(object arg) {
            if ((this.ByStreetKey_CombinedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ByStreetKey_CombinedCompleted(this, new ByStreetKey_CombinedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("PostcodeAnywhere2/ByLocalityKey", RequestNamespace="PostcodeAnywhere2", ResponseNamespace="PostcodeAnywhere2", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public InterimResults ByLocalityKey(string LocalityKey, string AccountCode, string LicenseKey, string MachineId) {
            object[] results = this.Invoke("ByLocalityKey", new object[] {
                        LocalityKey,
                        AccountCode,
                        LicenseKey,
                        MachineId});
            return ((InterimResults)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginByLocalityKey(string LocalityKey, string AccountCode, string LicenseKey, string MachineId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ByLocalityKey", new object[] {
                        LocalityKey,
                        AccountCode,
                        LicenseKey,
                        MachineId}, callback, asyncState);
        }
        
        /// <remarks/>
        public InterimResults EndByLocalityKey(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((InterimResults)(results[0]));
        }
        
        /// <remarks/>
        public void ByLocalityKeyAsync(string LocalityKey, string AccountCode, string LicenseKey, string MachineId) {
            this.ByLocalityKeyAsync(LocalityKey, AccountCode, LicenseKey, MachineId, null);
        }
        
        /// <remarks/>
        public void ByLocalityKeyAsync(string LocalityKey, string AccountCode, string LicenseKey, string MachineId, object userState) {
            if ((this.ByLocalityKeyOperationCompleted == null)) {
                this.ByLocalityKeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnByLocalityKeyOperationCompleted);
            }
            this.InvokeAsync("ByLocalityKey", new object[] {
                        LocalityKey,
                        AccountCode,
                        LicenseKey,
                        MachineId}, this.ByLocalityKeyOperationCompleted, userState);
        }
        
        private void OnByLocalityKeyOperationCompleted(object arg) {
            if ((this.ByLocalityKeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ByLocalityKeyCompleted(this, new ByLocalityKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("PostcodeAnywhere2/ByLocalityKey_DataSet", RequestNamespace="PostcodeAnywhere2", ResponseNamespace="PostcodeAnywhere2", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ByLocalityKey_DataSet(string LocalityKey, string AccountCode, string LicenseKey, string MachineId) {
            object[] results = this.Invoke("ByLocalityKey_DataSet", new object[] {
                        LocalityKey,
                        AccountCode,
                        LicenseKey,
                        MachineId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginByLocalityKey_DataSet(string LocalityKey, string AccountCode, string LicenseKey, string MachineId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ByLocalityKey_DataSet", new object[] {
                        LocalityKey,
                        AccountCode,
                        LicenseKey,
                        MachineId}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataSet EndByLocalityKey_DataSet(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ByLocalityKey_DataSetAsync(string LocalityKey, string AccountCode, string LicenseKey, string MachineId) {
            this.ByLocalityKey_DataSetAsync(LocalityKey, AccountCode, LicenseKey, MachineId, null);
        }
        
        /// <remarks/>
        public void ByLocalityKey_DataSetAsync(string LocalityKey, string AccountCode, string LicenseKey, string MachineId, object userState) {
            if ((this.ByLocalityKey_DataSetOperationCompleted == null)) {
                this.ByLocalityKey_DataSetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnByLocalityKey_DataSetOperationCompleted);
            }
            this.InvokeAsync("ByLocalityKey_DataSet", new object[] {
                        LocalityKey,
                        AccountCode,
                        LicenseKey,
                        MachineId}, this.ByLocalityKey_DataSetOperationCompleted, userState);
        }
        
        private void OnByLocalityKey_DataSetOperationCompleted(object arg) {
            if ((this.ByLocalityKey_DataSetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ByLocalityKey_DataSetCompleted(this, new ByLocalityKey_DataSetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("PostcodeAnywhere2/FetchAddress_Simple", RequestNamespace="PostcodeAnywhere2", ResponseNamespace="PostcodeAnywhere2", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public AddressResults FetchAddress_Simple(string Id, string Language, string ContentType, string AccountCode, string LicenseKey, string MachineId) {
            object[] results = this.Invoke("FetchAddress_Simple", new object[] {
                        Id,
                        Language,
                        ContentType,
                        AccountCode,
                        LicenseKey,
                        MachineId});
            return ((AddressResults)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginFetchAddress_Simple(string Id, string Language, string ContentType, string AccountCode, string LicenseKey, string MachineId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("FetchAddress_Simple", new object[] {
                        Id,
                        Language,
                        ContentType,
                        AccountCode,
                        LicenseKey,
                        MachineId}, callback, asyncState);
        }
        
        /// <remarks/>
        public AddressResults EndFetchAddress_Simple(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((AddressResults)(results[0]));
        }
        
        /// <remarks/>
        public void FetchAddress_SimpleAsync(string Id, string Language, string ContentType, string AccountCode, string LicenseKey, string MachineId) {
            this.FetchAddress_SimpleAsync(Id, Language, ContentType, AccountCode, LicenseKey, MachineId, null);
        }
        
        /// <remarks/>
        public void FetchAddress_SimpleAsync(string Id, string Language, string ContentType, string AccountCode, string LicenseKey, string MachineId, object userState) {
            if ((this.FetchAddress_SimpleOperationCompleted == null)) {
                this.FetchAddress_SimpleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetchAddress_SimpleOperationCompleted);
            }
            this.InvokeAsync("FetchAddress_Simple", new object[] {
                        Id,
                        Language,
                        ContentType,
                        AccountCode,
                        LicenseKey,
                        MachineId}, this.FetchAddress_SimpleOperationCompleted, userState);
        }
        
        private void OnFetchAddress_SimpleOperationCompleted(object arg) {
            if ((this.FetchAddress_SimpleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FetchAddress_SimpleCompleted(this, new FetchAddress_SimpleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("PostcodeAnywhere2/FetchAddress", RequestNamespace="PostcodeAnywhere2", ResponseNamespace="PostcodeAnywhere2", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public AddressResults FetchAddress(string Id, enLanguage Language, enContentType ContentType, string AccountCode, string LicenseKey, string MachineId) {
            object[] results = this.Invoke("FetchAddress", new object[] {
                        Id,
                        Language,
                        ContentType,
                        AccountCode,
                        LicenseKey,
                        MachineId});
            return ((AddressResults)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginFetchAddress(string Id, enLanguage Language, enContentType ContentType, string AccountCode, string LicenseKey, string MachineId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("FetchAddress", new object[] {
                        Id,
                        Language,
                        ContentType,
                        AccountCode,
                        LicenseKey,
                        MachineId}, callback, asyncState);
        }
        
        /// <remarks/>
        public AddressResults EndFetchAddress(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((AddressResults)(results[0]));
        }
        
        /// <remarks/>
        public void FetchAddressAsync(string Id, enLanguage Language, enContentType ContentType, string AccountCode, string LicenseKey, string MachineId) {
            this.FetchAddressAsync(Id, Language, ContentType, AccountCode, LicenseKey, MachineId, null);
        }
        
        /// <remarks/>
        public void FetchAddressAsync(string Id, enLanguage Language, enContentType ContentType, string AccountCode, string LicenseKey, string MachineId, object userState) {
            if ((this.FetchAddressOperationCompleted == null)) {
                this.FetchAddressOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetchAddressOperationCompleted);
            }
            this.InvokeAsync("FetchAddress", new object[] {
                        Id,
                        Language,
                        ContentType,
                        AccountCode,
                        LicenseKey,
                        MachineId}, this.FetchAddressOperationCompleted, userState);
        }
        
        private void OnFetchAddressOperationCompleted(object arg) {
            if ((this.FetchAddressCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FetchAddressCompleted(this, new FetchAddressCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("PostcodeAnywhere2/FastAddress", RequestNamespace="PostcodeAnywhere2", ResponseNamespace="PostcodeAnywhere2", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public AddressResults FastAddress(string Postcode, string Building, enLanguage Language, enContentType ContentType, string AccountCode, string LicenseKey, string MachineId) {
            object[] results = this.Invoke("FastAddress", new object[] {
                        Postcode,
                        Building,
                        Language,
                        ContentType,
                        AccountCode,
                        LicenseKey,
                        MachineId});
            return ((AddressResults)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginFastAddress(string Postcode, string Building, enLanguage Language, enContentType ContentType, string AccountCode, string LicenseKey, string MachineId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("FastAddress", new object[] {
                        Postcode,
                        Building,
                        Language,
                        ContentType,
                        AccountCode,
                        LicenseKey,
                        MachineId}, callback, asyncState);
        }
        
        /// <remarks/>
        public AddressResults EndFastAddress(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((AddressResults)(results[0]));
        }
        
        /// <remarks/>
        public void FastAddressAsync(string Postcode, string Building, enLanguage Language, enContentType ContentType, string AccountCode, string LicenseKey, string MachineId) {
            this.FastAddressAsync(Postcode, Building, Language, ContentType, AccountCode, LicenseKey, MachineId, null);
        }
        
        /// <remarks/>
        public void FastAddressAsync(string Postcode, string Building, enLanguage Language, enContentType ContentType, string AccountCode, string LicenseKey, string MachineId, object userState) {
            if ((this.FastAddressOperationCompleted == null)) {
                this.FastAddressOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFastAddressOperationCompleted);
            }
            this.InvokeAsync("FastAddress", new object[] {
                        Postcode,
                        Building,
                        Language,
                        ContentType,
                        AccountCode,
                        LicenseKey,
                        MachineId}, this.FastAddressOperationCompleted, userState);
        }
        
        private void OnFastAddressOperationCompleted(object arg) {
            if ((this.FastAddressCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FastAddressCompleted(this, new FastAddressCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("PostcodeAnywhere2/FetchAddress_DataSet", RequestNamespace="PostcodeAnywhere2", ResponseNamespace="PostcodeAnywhere2", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet FetchAddress_DataSet(string Id, enLanguage Language, enContentType ContentType, string AccountCode, string LicenseKey, string MachineId) {
            object[] results = this.Invoke("FetchAddress_DataSet", new object[] {
                        Id,
                        Language,
                        ContentType,
                        AccountCode,
                        LicenseKey,
                        MachineId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginFetchAddress_DataSet(string Id, enLanguage Language, enContentType ContentType, string AccountCode, string LicenseKey, string MachineId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("FetchAddress_DataSet", new object[] {
                        Id,
                        Language,
                        ContentType,
                        AccountCode,
                        LicenseKey,
                        MachineId}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataSet EndFetchAddress_DataSet(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void FetchAddress_DataSetAsync(string Id, enLanguage Language, enContentType ContentType, string AccountCode, string LicenseKey, string MachineId) {
            this.FetchAddress_DataSetAsync(Id, Language, ContentType, AccountCode, LicenseKey, MachineId, null);
        }
        
        /// <remarks/>
        public void FetchAddress_DataSetAsync(string Id, enLanguage Language, enContentType ContentType, string AccountCode, string LicenseKey, string MachineId, object userState) {
            if ((this.FetchAddress_DataSetOperationCompleted == null)) {
                this.FetchAddress_DataSetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetchAddress_DataSetOperationCompleted);
            }
            this.InvokeAsync("FetchAddress_DataSet", new object[] {
                        Id,
                        Language,
                        ContentType,
                        AccountCode,
                        LicenseKey,
                        MachineId}, this.FetchAddress_DataSetOperationCompleted, userState);
        }
        
        private void OnFetchAddress_DataSetOperationCompleted(object arg) {
            if ((this.FetchAddress_DataSetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FetchAddress_DataSetCompleted(this, new FetchAddress_DataSetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("PostcodeAnywhere2/FastAddress_DataSet", RequestNamespace="PostcodeAnywhere2", ResponseNamespace="PostcodeAnywhere2", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet FastAddress_DataSet(string Postcode, string Building, enLanguage Language, enContentType ContentType, string AccountCode, string LicenseKey, string MachineId) {
            object[] results = this.Invoke("FastAddress_DataSet", new object[] {
                        Postcode,
                        Building,
                        Language,
                        ContentType,
                        AccountCode,
                        LicenseKey,
                        MachineId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginFastAddress_DataSet(string Postcode, string Building, enLanguage Language, enContentType ContentType, string AccountCode, string LicenseKey, string MachineId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("FastAddress_DataSet", new object[] {
                        Postcode,
                        Building,
                        Language,
                        ContentType,
                        AccountCode,
                        LicenseKey,
                        MachineId}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataSet EndFastAddress_DataSet(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void FastAddress_DataSetAsync(string Postcode, string Building, enLanguage Language, enContentType ContentType, string AccountCode, string LicenseKey, string MachineId) {
            this.FastAddress_DataSetAsync(Postcode, Building, Language, ContentType, AccountCode, LicenseKey, MachineId, null);
        }
        
        /// <remarks/>
        public void FastAddress_DataSetAsync(string Postcode, string Building, enLanguage Language, enContentType ContentType, string AccountCode, string LicenseKey, string MachineId, object userState) {
            if ((this.FastAddress_DataSetOperationCompleted == null)) {
                this.FastAddress_DataSetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFastAddress_DataSetOperationCompleted);
            }
            this.InvokeAsync("FastAddress_DataSet", new object[] {
                        Postcode,
                        Building,
                        Language,
                        ContentType,
                        AccountCode,
                        LicenseKey,
                        MachineId}, this.FastAddress_DataSetOperationCompleted, userState);
        }
        
        private void OnFastAddress_DataSetOperationCompleted(object arg) {
            if ((this.FastAddress_DataSetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FastAddress_DataSetCompleted(this, new FastAddress_DataSetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("PostcodeAnywhere2/Distance", RequestNamespace="PostcodeAnywhere2", ResponseNamespace="PostcodeAnywhere2", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public double Distance(string Origin, string Destination, string AccountCode, string LicenseKey, string MachineId) {
            object[] results = this.Invoke("Distance", new object[] {
                        Origin,
                        Destination,
                        AccountCode,
                        LicenseKey,
                        MachineId});
            return ((double)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDistance(string Origin, string Destination, string AccountCode, string LicenseKey, string MachineId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Distance", new object[] {
                        Origin,
                        Destination,
                        AccountCode,
                        LicenseKey,
                        MachineId}, callback, asyncState);
        }
        
        /// <remarks/>
        public double EndDistance(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((double)(results[0]));
        }
        
        /// <remarks/>
        public void DistanceAsync(string Origin, string Destination, string AccountCode, string LicenseKey, string MachineId) {
            this.DistanceAsync(Origin, Destination, AccountCode, LicenseKey, MachineId, null);
        }
        
        /// <remarks/>
        public void DistanceAsync(string Origin, string Destination, string AccountCode, string LicenseKey, string MachineId, object userState) {
            if ((this.DistanceOperationCompleted == null)) {
                this.DistanceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDistanceOperationCompleted);
            }
            this.InvokeAsync("Distance", new object[] {
                        Origin,
                        Destination,
                        AccountCode,
                        LicenseKey,
                        MachineId}, this.DistanceOperationCompleted, userState);
        }
        
        private void OnDistanceOperationCompleted(object arg) {
            if ((this.DistanceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DistanceCompleted(this, new DistanceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("PostcodeAnywhere2/Nearest", RequestNamespace="PostcodeAnywhere2", ResponseNamespace="PostcodeAnywhere2", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public NearestResults Nearest(string Origin, string[] Destinations, enUnitType Units, int Items, string AccountCode, string LicenseKey, string MachineId) {
            object[] results = this.Invoke("Nearest", new object[] {
                        Origin,
                        Destinations,
                        Units,
                        Items,
                        AccountCode,
                        LicenseKey,
                        MachineId});
            return ((NearestResults)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginNearest(string Origin, string[] Destinations, enUnitType Units, int Items, string AccountCode, string LicenseKey, string MachineId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Nearest", new object[] {
                        Origin,
                        Destinations,
                        Units,
                        Items,
                        AccountCode,
                        LicenseKey,
                        MachineId}, callback, asyncState);
        }
        
        /// <remarks/>
        public NearestResults EndNearest(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((NearestResults)(results[0]));
        }
        
        /// <remarks/>
        public void NearestAsync(string Origin, string[] Destinations, enUnitType Units, int Items, string AccountCode, string LicenseKey, string MachineId) {
            this.NearestAsync(Origin, Destinations, Units, Items, AccountCode, LicenseKey, MachineId, null);
        }
        
        /// <remarks/>
        public void NearestAsync(string Origin, string[] Destinations, enUnitType Units, int Items, string AccountCode, string LicenseKey, string MachineId, object userState) {
            if ((this.NearestOperationCompleted == null)) {
                this.NearestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnNearestOperationCompleted);
            }
            this.InvokeAsync("Nearest", new object[] {
                        Origin,
                        Destinations,
                        Units,
                        Items,
                        AccountCode,
                        LicenseKey,
                        MachineId}, this.NearestOperationCompleted, userState);
        }
        
        private void OnNearestOperationCompleted(object arg) {
            if ((this.NearestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.NearestCompleted(this, new NearestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("PostcodeAnywhere2/Nearest_DataSet", RequestNamespace="PostcodeAnywhere2", ResponseNamespace="PostcodeAnywhere2", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Nearest_DataSet(string Origin, string[] Destinations, enUnitType Units, int Items, string AccountCode, string LicenseKey, string MachineId) {
            object[] results = this.Invoke("Nearest_DataSet", new object[] {
                        Origin,
                        Destinations,
                        Units,
                        Items,
                        AccountCode,
                        LicenseKey,
                        MachineId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginNearest_DataSet(string Origin, string[] Destinations, enUnitType Units, int Items, string AccountCode, string LicenseKey, string MachineId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Nearest_DataSet", new object[] {
                        Origin,
                        Destinations,
                        Units,
                        Items,
                        AccountCode,
                        LicenseKey,
                        MachineId}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataSet EndNearest_DataSet(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Nearest_DataSetAsync(string Origin, string[] Destinations, enUnitType Units, int Items, string AccountCode, string LicenseKey, string MachineId) {
            this.Nearest_DataSetAsync(Origin, Destinations, Units, Items, AccountCode, LicenseKey, MachineId, null);
        }
        
        /// <remarks/>
        public void Nearest_DataSetAsync(string Origin, string[] Destinations, enUnitType Units, int Items, string AccountCode, string LicenseKey, string MachineId, object userState) {
            if ((this.Nearest_DataSetOperationCompleted == null)) {
                this.Nearest_DataSetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnNearest_DataSetOperationCompleted);
            }
            this.InvokeAsync("Nearest_DataSet", new object[] {
                        Origin,
                        Destinations,
                        Units,
                        Items,
                        AccountCode,
                        LicenseKey,
                        MachineId}, this.Nearest_DataSetOperationCompleted, userState);
        }
        
        private void OnNearest_DataSetOperationCompleted(object arg) {
            if ((this.Nearest_DataSetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Nearest_DataSetCompleted(this, new Nearest_DataSetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("PostcodeAnywhere2/StoredNearest", RequestNamespace="PostcodeAnywhere2", ResponseNamespace="PostcodeAnywhere2", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public NearestResults StoredNearest(string Origin, enUnitType Units, int Items, string AccountCode, string LicenseKey, string MachineId) {
            object[] results = this.Invoke("StoredNearest", new object[] {
                        Origin,
                        Units,
                        Items,
                        AccountCode,
                        LicenseKey,
                        MachineId});
            return ((NearestResults)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginStoredNearest(string Origin, enUnitType Units, int Items, string AccountCode, string LicenseKey, string MachineId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("StoredNearest", new object[] {
                        Origin,
                        Units,
                        Items,
                        AccountCode,
                        LicenseKey,
                        MachineId}, callback, asyncState);
        }
        
        /// <remarks/>
        public NearestResults EndStoredNearest(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((NearestResults)(results[0]));
        }
        
        /// <remarks/>
        public void StoredNearestAsync(string Origin, enUnitType Units, int Items, string AccountCode, string LicenseKey, string MachineId) {
            this.StoredNearestAsync(Origin, Units, Items, AccountCode, LicenseKey, MachineId, null);
        }
        
        /// <remarks/>
        public void StoredNearestAsync(string Origin, enUnitType Units, int Items, string AccountCode, string LicenseKey, string MachineId, object userState) {
            if ((this.StoredNearestOperationCompleted == null)) {
                this.StoredNearestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnStoredNearestOperationCompleted);
            }
            this.InvokeAsync("StoredNearest", new object[] {
                        Origin,
                        Units,
                        Items,
                        AccountCode,
                        LicenseKey,
                        MachineId}, this.StoredNearestOperationCompleted, userState);
        }
        
        private void OnStoredNearestOperationCompleted(object arg) {
            if ((this.StoredNearestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.StoredNearestCompleted(this, new StoredNearestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("PostcodeAnywhere2/StoredNearest_DataSet", RequestNamespace="PostcodeAnywhere2", ResponseNamespace="PostcodeAnywhere2", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet StoredNearest_DataSet(string Origin, enUnitType Units, int Items, string AccountCode, string LicenseKey, string MachineId) {
            object[] results = this.Invoke("StoredNearest_DataSet", new object[] {
                        Origin,
                        Units,
                        Items,
                        AccountCode,
                        LicenseKey,
                        MachineId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginStoredNearest_DataSet(string Origin, enUnitType Units, int Items, string AccountCode, string LicenseKey, string MachineId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("StoredNearest_DataSet", new object[] {
                        Origin,
                        Units,
                        Items,
                        AccountCode,
                        LicenseKey,
                        MachineId}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataSet EndStoredNearest_DataSet(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void StoredNearest_DataSetAsync(string Origin, enUnitType Units, int Items, string AccountCode, string LicenseKey, string MachineId) {
            this.StoredNearest_DataSetAsync(Origin, Units, Items, AccountCode, LicenseKey, MachineId, null);
        }
        
        /// <remarks/>
        public void StoredNearest_DataSetAsync(string Origin, enUnitType Units, int Items, string AccountCode, string LicenseKey, string MachineId, object userState) {
            if ((this.StoredNearest_DataSetOperationCompleted == null)) {
                this.StoredNearest_DataSetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnStoredNearest_DataSetOperationCompleted);
            }
            this.InvokeAsync("StoredNearest_DataSet", new object[] {
                        Origin,
                        Units,
                        Items,
                        AccountCode,
                        LicenseKey,
                        MachineId}, this.StoredNearest_DataSetOperationCompleted, userState);
        }
        
        private void OnStoredNearest_DataSetOperationCompleted(object arg) {
            if ((this.StoredNearest_DataSetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.StoredNearest_DataSetCompleted(this, new StoredNearest_DataSetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("PostcodeAnywhere2/NearestRadial", RequestNamespace="PostcodeAnywhere2", ResponseNamespace="PostcodeAnywhere2", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public NearestResults NearestRadial(string Origin, string[] Destinations, enUnitType Units, int Radius, int Items, string AccountCode, string LicenseKey, string MachineId) {
            object[] results = this.Invoke("NearestRadial", new object[] {
                        Origin,
                        Destinations,
                        Units,
                        Radius,
                        Items,
                        AccountCode,
                        LicenseKey,
                        MachineId});
            return ((NearestResults)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginNearestRadial(string Origin, string[] Destinations, enUnitType Units, int Radius, int Items, string AccountCode, string LicenseKey, string MachineId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("NearestRadial", new object[] {
                        Origin,
                        Destinations,
                        Units,
                        Radius,
                        Items,
                        AccountCode,
                        LicenseKey,
                        MachineId}, callback, asyncState);
        }
        
        /// <remarks/>
        public NearestResults EndNearestRadial(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((NearestResults)(results[0]));
        }
        
        /// <remarks/>
        public void NearestRadialAsync(string Origin, string[] Destinations, enUnitType Units, int Radius, int Items, string AccountCode, string LicenseKey, string MachineId) {
            this.NearestRadialAsync(Origin, Destinations, Units, Radius, Items, AccountCode, LicenseKey, MachineId, null);
        }
        
        /// <remarks/>
        public void NearestRadialAsync(string Origin, string[] Destinations, enUnitType Units, int Radius, int Items, string AccountCode, string LicenseKey, string MachineId, object userState) {
            if ((this.NearestRadialOperationCompleted == null)) {
                this.NearestRadialOperationCompleted = new System.Threading.SendOrPostCallback(this.OnNearestRadialOperationCompleted);
            }
            this.InvokeAsync("NearestRadial", new object[] {
                        Origin,
                        Destinations,
                        Units,
                        Radius,
                        Items,
                        AccountCode,
                        LicenseKey,
                        MachineId}, this.NearestRadialOperationCompleted, userState);
        }
        
        private void OnNearestRadialOperationCompleted(object arg) {
            if ((this.NearestRadialCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.NearestRadialCompleted(this, new NearestRadialCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("PostcodeAnywhere2/NearestRadial_DataSet", RequestNamespace="PostcodeAnywhere2", ResponseNamespace="PostcodeAnywhere2", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet NearestRadial_DataSet(string Origin, string[] Destinations, enUnitType Units, int Radius, int Items, string AccountCode, string LicenseKey, string MachineId) {
            object[] results = this.Invoke("NearestRadial_DataSet", new object[] {
                        Origin,
                        Destinations,
                        Units,
                        Radius,
                        Items,
                        AccountCode,
                        LicenseKey,
                        MachineId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginNearestRadial_DataSet(string Origin, string[] Destinations, enUnitType Units, int Radius, int Items, string AccountCode, string LicenseKey, string MachineId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("NearestRadial_DataSet", new object[] {
                        Origin,
                        Destinations,
                        Units,
                        Radius,
                        Items,
                        AccountCode,
                        LicenseKey,
                        MachineId}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataSet EndNearestRadial_DataSet(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void NearestRadial_DataSetAsync(string Origin, string[] Destinations, enUnitType Units, int Radius, int Items, string AccountCode, string LicenseKey, string MachineId) {
            this.NearestRadial_DataSetAsync(Origin, Destinations, Units, Radius, Items, AccountCode, LicenseKey, MachineId, null);
        }
        
        /// <remarks/>
        public void NearestRadial_DataSetAsync(string Origin, string[] Destinations, enUnitType Units, int Radius, int Items, string AccountCode, string LicenseKey, string MachineId, object userState) {
            if ((this.NearestRadial_DataSetOperationCompleted == null)) {
                this.NearestRadial_DataSetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnNearestRadial_DataSetOperationCompleted);
            }
            this.InvokeAsync("NearestRadial_DataSet", new object[] {
                        Origin,
                        Destinations,
                        Units,
                        Radius,
                        Items,
                        AccountCode,
                        LicenseKey,
                        MachineId}, this.NearestRadial_DataSetOperationCompleted, userState);
        }
        
        private void OnNearestRadial_DataSetOperationCompleted(object arg) {
            if ((this.NearestRadial_DataSetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.NearestRadial_DataSetCompleted(this, new NearestRadial_DataSetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("PostcodeAnywhere2/StoredNearestRadial", RequestNamespace="PostcodeAnywhere2", ResponseNamespace="PostcodeAnywhere2", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public NearestResults StoredNearestRadial(string Origin, enUnitType Units, int Radius, int Items, string AccountCode, string LicenseKey, string MachineId) {
            object[] results = this.Invoke("StoredNearestRadial", new object[] {
                        Origin,
                        Units,
                        Radius,
                        Items,
                        AccountCode,
                        LicenseKey,
                        MachineId});
            return ((NearestResults)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginStoredNearestRadial(string Origin, enUnitType Units, int Radius, int Items, string AccountCode, string LicenseKey, string MachineId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("StoredNearestRadial", new object[] {
                        Origin,
                        Units,
                        Radius,
                        Items,
                        AccountCode,
                        LicenseKey,
                        MachineId}, callback, asyncState);
        }
        
        /// <remarks/>
        public NearestResults EndStoredNearestRadial(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((NearestResults)(results[0]));
        }
        
        /// <remarks/>
        public void StoredNearestRadialAsync(string Origin, enUnitType Units, int Radius, int Items, string AccountCode, string LicenseKey, string MachineId) {
            this.StoredNearestRadialAsync(Origin, Units, Radius, Items, AccountCode, LicenseKey, MachineId, null);
        }
        
        /// <remarks/>
        public void StoredNearestRadialAsync(string Origin, enUnitType Units, int Radius, int Items, string AccountCode, string LicenseKey, string MachineId, object userState) {
            if ((this.StoredNearestRadialOperationCompleted == null)) {
                this.StoredNearestRadialOperationCompleted = new System.Threading.SendOrPostCallback(this.OnStoredNearestRadialOperationCompleted);
            }
            this.InvokeAsync("StoredNearestRadial", new object[] {
                        Origin,
                        Units,
                        Radius,
                        Items,
                        AccountCode,
                        LicenseKey,
                        MachineId}, this.StoredNearestRadialOperationCompleted, userState);
        }
        
        private void OnStoredNearestRadialOperationCompleted(object arg) {
            if ((this.StoredNearestRadialCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.StoredNearestRadialCompleted(this, new StoredNearestRadialCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("PostcodeAnywhere2/StoredNearestRadial_DataSet", RequestNamespace="PostcodeAnywhere2", ResponseNamespace="PostcodeAnywhere2", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet StoredNearestRadial_DataSet(string Origin, enUnitType Units, int Radius, int Items, string AccountCode, string LicenseKey, string MachineId) {
            object[] results = this.Invoke("StoredNearestRadial_DataSet", new object[] {
                        Origin,
                        Units,
                        Radius,
                        Items,
                        AccountCode,
                        LicenseKey,
                        MachineId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginStoredNearestRadial_DataSet(string Origin, enUnitType Units, int Radius, int Items, string AccountCode, string LicenseKey, string MachineId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("StoredNearestRadial_DataSet", new object[] {
                        Origin,
                        Units,
                        Radius,
                        Items,
                        AccountCode,
                        LicenseKey,
                        MachineId}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataSet EndStoredNearestRadial_DataSet(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void StoredNearestRadial_DataSetAsync(string Origin, enUnitType Units, int Radius, int Items, string AccountCode, string LicenseKey, string MachineId) {
            this.StoredNearestRadial_DataSetAsync(Origin, Units, Radius, Items, AccountCode, LicenseKey, MachineId, null);
        }
        
        /// <remarks/>
        public void StoredNearestRadial_DataSetAsync(string Origin, enUnitType Units, int Radius, int Items, string AccountCode, string LicenseKey, string MachineId, object userState) {
            if ((this.StoredNearestRadial_DataSetOperationCompleted == null)) {
                this.StoredNearestRadial_DataSetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnStoredNearestRadial_DataSetOperationCompleted);
            }
            this.InvokeAsync("StoredNearestRadial_DataSet", new object[] {
                        Origin,
                        Units,
                        Radius,
                        Items,
                        AccountCode,
                        LicenseKey,
                        MachineId}, this.StoredNearestRadial_DataSetOperationCompleted, userState);
        }
        
        private void OnStoredNearestRadial_DataSetOperationCompleted(object arg) {
            if ((this.StoredNearestRadial_DataSetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.StoredNearestRadial_DataSetCompleted(this, new StoredNearestRadial_DataSetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("PostcodeAnywhere2/Changes", RequestNamespace="PostcodeAnywhere2", ResponseNamespace="PostcodeAnywhere2", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ChangesResults Changes(System.DateTime StartDate, string EndDate, string AccountCode, string LicenseKey, string MachineId) {
            object[] results = this.Invoke("Changes", new object[] {
                        StartDate,
                        EndDate,
                        AccountCode,
                        LicenseKey,
                        MachineId});
            return ((ChangesResults)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginChanges(System.DateTime StartDate, string EndDate, string AccountCode, string LicenseKey, string MachineId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Changes", new object[] {
                        StartDate,
                        EndDate,
                        AccountCode,
                        LicenseKey,
                        MachineId}, callback, asyncState);
        }
        
        /// <remarks/>
        public ChangesResults EndChanges(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ChangesResults)(results[0]));
        }
        
        /// <remarks/>
        public void ChangesAsync(System.DateTime StartDate, string EndDate, string AccountCode, string LicenseKey, string MachineId) {
            this.ChangesAsync(StartDate, EndDate, AccountCode, LicenseKey, MachineId, null);
        }
        
        /// <remarks/>
        public void ChangesAsync(System.DateTime StartDate, string EndDate, string AccountCode, string LicenseKey, string MachineId, object userState) {
            if ((this.ChangesOperationCompleted == null)) {
                this.ChangesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChangesOperationCompleted);
            }
            this.InvokeAsync("Changes", new object[] {
                        StartDate,
                        EndDate,
                        AccountCode,
                        LicenseKey,
                        MachineId}, this.ChangesOperationCompleted, userState);
        }
        
        private void OnChangesOperationCompleted(object arg) {
            if ((this.ChangesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChangesCompleted(this, new ChangesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("PostcodeAnywhere2/Changes_DataSet", RequestNamespace="PostcodeAnywhere2", ResponseNamespace="PostcodeAnywhere2", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Changes_DataSet(System.DateTime StartDate, string EndDate, string AccountCode, string LicenseKey, string MachineId) {
            object[] results = this.Invoke("Changes_DataSet", new object[] {
                        StartDate,
                        EndDate,
                        AccountCode,
                        LicenseKey,
                        MachineId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginChanges_DataSet(System.DateTime StartDate, string EndDate, string AccountCode, string LicenseKey, string MachineId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Changes_DataSet", new object[] {
                        StartDate,
                        EndDate,
                        AccountCode,
                        LicenseKey,
                        MachineId}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataSet EndChanges_DataSet(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Changes_DataSetAsync(System.DateTime StartDate, string EndDate, string AccountCode, string LicenseKey, string MachineId) {
            this.Changes_DataSetAsync(StartDate, EndDate, AccountCode, LicenseKey, MachineId, null);
        }
        
        /// <remarks/>
        public void Changes_DataSetAsync(System.DateTime StartDate, string EndDate, string AccountCode, string LicenseKey, string MachineId, object userState) {
            if ((this.Changes_DataSetOperationCompleted == null)) {
                this.Changes_DataSetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChanges_DataSetOperationCompleted);
            }
            this.InvokeAsync("Changes_DataSet", new object[] {
                        StartDate,
                        EndDate,
                        AccountCode,
                        LicenseKey,
                        MachineId}, this.Changes_DataSetOperationCompleted, userState);
        }
        
        private void OnChanges_DataSetOperationCompleted(object arg) {
            if ((this.Changes_DataSetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Changes_DataSetCompleted(this, new Changes_DataSetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("PostcodeAnywhere2/Cleanse", RequestNamespace="PostcodeAnywhere2", ResponseNamespace="PostcodeAnywhere2", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CleanseResults Cleanse(string Postcode, string Street, string Organisation, string Building, string Town, string Address, string AccountCode, string LicenseKey, string MachineId) {
            object[] results = this.Invoke("Cleanse", new object[] {
                        Postcode,
                        Street,
                        Organisation,
                        Building,
                        Town,
                        Address,
                        AccountCode,
                        LicenseKey,
                        MachineId});
            return ((CleanseResults)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCleanse(string Postcode, string Street, string Organisation, string Building, string Town, string Address, string AccountCode, string LicenseKey, string MachineId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Cleanse", new object[] {
                        Postcode,
                        Street,
                        Organisation,
                        Building,
                        Town,
                        Address,
                        AccountCode,
                        LicenseKey,
                        MachineId}, callback, asyncState);
        }
        
        /// <remarks/>
        public CleanseResults EndCleanse(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((CleanseResults)(results[0]));
        }
        
        /// <remarks/>
        public void CleanseAsync(string Postcode, string Street, string Organisation, string Building, string Town, string Address, string AccountCode, string LicenseKey, string MachineId) {
            this.CleanseAsync(Postcode, Street, Organisation, Building, Town, Address, AccountCode, LicenseKey, MachineId, null);
        }
        
        /// <remarks/>
        public void CleanseAsync(string Postcode, string Street, string Organisation, string Building, string Town, string Address, string AccountCode, string LicenseKey, string MachineId, object userState) {
            if ((this.CleanseOperationCompleted == null)) {
                this.CleanseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCleanseOperationCompleted);
            }
            this.InvokeAsync("Cleanse", new object[] {
                        Postcode,
                        Street,
                        Organisation,
                        Building,
                        Town,
                        Address,
                        AccountCode,
                        LicenseKey,
                        MachineId}, this.CleanseOperationCompleted, userState);
        }
        
        private void OnCleanseOperationCompleted(object arg) {
            if ((this.CleanseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CleanseCompleted(this, new CleanseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("PostcodeAnywhere2/Cleanse_DataSet", RequestNamespace="PostcodeAnywhere2", ResponseNamespace="PostcodeAnywhere2", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Cleanse_DataSet(string Postcode, string Street, string Organisation, string Building, string Town, string Address, string AccountCode, string LicenseKey, string MachineId) {
            object[] results = this.Invoke("Cleanse_DataSet", new object[] {
                        Postcode,
                        Street,
                        Organisation,
                        Building,
                        Town,
                        Address,
                        AccountCode,
                        LicenseKey,
                        MachineId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCleanse_DataSet(string Postcode, string Street, string Organisation, string Building, string Town, string Address, string AccountCode, string LicenseKey, string MachineId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Cleanse_DataSet", new object[] {
                        Postcode,
                        Street,
                        Organisation,
                        Building,
                        Town,
                        Address,
                        AccountCode,
                        LicenseKey,
                        MachineId}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataSet EndCleanse_DataSet(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Cleanse_DataSetAsync(string Postcode, string Street, string Organisation, string Building, string Town, string Address, string AccountCode, string LicenseKey, string MachineId) {
            this.Cleanse_DataSetAsync(Postcode, Street, Organisation, Building, Town, Address, AccountCode, LicenseKey, MachineId, null);
        }
        
        /// <remarks/>
        public void Cleanse_DataSetAsync(string Postcode, string Street, string Organisation, string Building, string Town, string Address, string AccountCode, string LicenseKey, string MachineId, object userState) {
            if ((this.Cleanse_DataSetOperationCompleted == null)) {
                this.Cleanse_DataSetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCleanse_DataSetOperationCompleted);
            }
            this.InvokeAsync("Cleanse_DataSet", new object[] {
                        Postcode,
                        Street,
                        Organisation,
                        Building,
                        Town,
                        Address,
                        AccountCode,
                        LicenseKey,
                        MachineId}, this.Cleanse_DataSetOperationCompleted, userState);
        }
        
        private void OnCleanse_DataSetOperationCompleted(object arg) {
            if ((this.Cleanse_DataSetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Cleanse_DataSetCompleted(this, new Cleanse_DataSetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2053.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="PostcodeAnywhere2")]
    public partial class InterimResults {
        
        private bool isErrorField;
        
        private int errorNumberField;
        
        private string errorMessageField;
        
        private InterimResult[] resultsField;
        
        /// <remarks/>
        public bool IsError {
            get {
                return this.isErrorField;
            }
            set {
                this.isErrorField = value;
            }
        }
        
        /// <remarks/>
        public int ErrorNumber {
            get {
                return this.errorNumberField;
            }
            set {
                this.errorNumberField = value;
            }
        }
        
        /// <remarks/>
        public string ErrorMessage {
            get {
                return this.errorMessageField;
            }
            set {
                this.errorMessageField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public InterimResult[] Results {
            get {
                return this.resultsField;
            }
            set {
                this.resultsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2053.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="PostcodeAnywhere2")]
    public partial class InterimResult {
        
        private string idField;
        
        private string descriptionField;
        
        /// <remarks/>
        public string Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2053.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="PostcodeAnywhere2")]
    public partial class CleanseResult {
        
        private string idField;
        
        private string descriptionField;
        
        private double confidenceField;
        
        /// <remarks/>
        public string Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        public double Confidence {
            get {
                return this.confidenceField;
            }
            set {
                this.confidenceField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2053.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="PostcodeAnywhere2")]
    public partial class CleanseResults {
        
        private bool isErrorField;
        
        private int errorNumberField;
        
        private string errorMessageField;
        
        private CleanseResult[] resultsField;
        
        /// <remarks/>
        public bool IsError {
            get {
                return this.isErrorField;
            }
            set {
                this.isErrorField = value;
            }
        }
        
        /// <remarks/>
        public int ErrorNumber {
            get {
                return this.errorNumberField;
            }
            set {
                this.errorNumberField = value;
            }
        }
        
        /// <remarks/>
        public string ErrorMessage {
            get {
                return this.errorMessageField;
            }
            set {
                this.errorMessageField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public CleanseResult[] Results {
            get {
                return this.resultsField;
            }
            set {
                this.resultsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2053.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="PostcodeAnywhere2")]
    public partial class ChangesResult {
        
        private string idField;
        
        private System.DateTime changeDateField;
        
        private enChangeType changeTypeField;
        
        private enChangeReason changeReasonField;
        
        private string descriptionField;
        
        /// <remarks/>
        public string ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime ChangeDate {
            get {
                return this.changeDateField;
            }
            set {
                this.changeDateField = value;
            }
        }
        
        /// <remarks/>
        public enChangeType ChangeType {
            get {
                return this.changeTypeField;
            }
            set {
                this.changeTypeField = value;
            }
        }
        
        /// <remarks/>
        public enChangeReason ChangeReason {
            get {
                return this.changeReasonField;
            }
            set {
                this.changeReasonField = value;
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2053.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="PostcodeAnywhere2")]
    public enum enChangeType {
        
        /// <remarks/>
        enChangeTypeAddition,
        
        /// <remarks/>
        enChangeTypeDeletion,
        
        /// <remarks/>
        enChangeTypeChange,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2053.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="PostcodeAnywhere2")]
    public enum enChangeReason {
        
        /// <remarks/>
        enChangeReasonNewProperty,
        
        /// <remarks/>
        enChangeReasonErrorCorrection,
        
        /// <remarks/>
        enChangeReasonDemolition,
        
        /// <remarks/>
        enChangeReasonCodingRevision,
        
        /// <remarks/>
        enChangeReasonOrganisationChange,
        
        /// <remarks/>
        enChangeReasonStatusChange,
        
        /// <remarks/>
        enChangeReasonLargeUserClosedDown,
        
        /// <remarks/>
        enChangeReasonBuildingDetailsChanged,
        
        /// <remarks/>
        enChangeReasonLargeUserAddressChanged,
        
        /// <remarks/>
        enChangeReasonUnknown,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2053.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="PostcodeAnywhere2")]
    public partial class ChangesResults {
        
        private bool isErrorField;
        
        private int errorNumberField;
        
        private string errorMessageField;
        
        private ChangesResult[] resultsField;
        
        /// <remarks/>
        public bool IsError {
            get {
                return this.isErrorField;
            }
            set {
                this.isErrorField = value;
            }
        }
        
        /// <remarks/>
        public int ErrorNumber {
            get {
                return this.errorNumberField;
            }
            set {
                this.errorNumberField = value;
            }
        }
        
        /// <remarks/>
        public string ErrorMessage {
            get {
                return this.errorMessageField;
            }
            set {
                this.errorMessageField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public ChangesResult[] Results {
            get {
                return this.resultsField;
            }
            set {
                this.resultsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2053.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="PostcodeAnywhere2")]
    public partial class NearestResult {
        
        private string originPostcodeField;
        
        private string destinationPostcodeField;
        
        private string idField;
        
        private string descriptionField;
        
        private double distanceField;
        
        private int gridEastMField;
        
        private int gridNorthMField;
        
        /// <remarks/>
        public string OriginPostcode {
            get {
                return this.originPostcodeField;
            }
            set {
                this.originPostcodeField = value;
            }
        }
        
        /// <remarks/>
        public string DestinationPostcode {
            get {
                return this.destinationPostcodeField;
            }
            set {
                this.destinationPostcodeField = value;
            }
        }
        
        /// <remarks/>
        public string ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        public double Distance {
            get {
                return this.distanceField;
            }
            set {
                this.distanceField = value;
            }
        }
        
        /// <remarks/>
        public int GridEastM {
            get {
                return this.gridEastMField;
            }
            set {
                this.gridEastMField = value;
            }
        }
        
        /// <remarks/>
        public int GridNorthM {
            get {
                return this.gridNorthMField;
            }
            set {
                this.gridNorthMField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2053.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="PostcodeAnywhere2")]
    public partial class NearestResults {
        
        private bool isErrorField;
        
        private int errorNumberField;
        
        private string errorMessageField;
        
        private NearestResult[] resultsField;
        
        /// <remarks/>
        public bool IsError {
            get {
                return this.isErrorField;
            }
            set {
                this.isErrorField = value;
            }
        }
        
        /// <remarks/>
        public int ErrorNumber {
            get {
                return this.errorNumberField;
            }
            set {
                this.errorNumberField = value;
            }
        }
        
        /// <remarks/>
        public string ErrorMessage {
            get {
                return this.errorMessageField;
            }
            set {
                this.errorMessageField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public NearestResult[] Results {
            get {
                return this.resultsField;
            }
            set {
                this.resultsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2053.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="PostcodeAnywhere2")]
    public partial class AddressGeographicData {
        
        private int gridEastMField;
        
        private int gridNorthMField;
        
        private string districtCodeField;
        
        private string wardCodeField;
        
        private string nHSCodeField;
        
        private string nHSRegionCodeField;
        
        private string countyCodeField;
        
        private string countryCodeField;
        
        private string wardStatusField;
        
        private string wardNameField;
        
        private string districtNameField;
        
        private bool objective2Field;
        
        private string objective2RegionField;
        
        private bool transitionalField;
        
        private double longitudeField;
        
        private double latitudeField;
        
        private string oSReferenceField;
        
        private double wGS84LongitudeField;
        
        private double wGS84LatitudeField;
        
        /// <remarks/>
        public int GridEastM {
            get {
                return this.gridEastMField;
            }
            set {
                this.gridEastMField = value;
            }
        }
        
        /// <remarks/>
        public int GridNorthM {
            get {
                return this.gridNorthMField;
            }
            set {
                this.gridNorthMField = value;
            }
        }
        
        /// <remarks/>
        public string DistrictCode {
            get {
                return this.districtCodeField;
            }
            set {
                this.districtCodeField = value;
            }
        }
        
        /// <remarks/>
        public string WardCode {
            get {
                return this.wardCodeField;
            }
            set {
                this.wardCodeField = value;
            }
        }
        
        /// <remarks/>
        public string NHSCode {
            get {
                return this.nHSCodeField;
            }
            set {
                this.nHSCodeField = value;
            }
        }
        
        /// <remarks/>
        public string NHSRegionCode {
            get {
                return this.nHSRegionCodeField;
            }
            set {
                this.nHSRegionCodeField = value;
            }
        }
        
        /// <remarks/>
        public string CountyCode {
            get {
                return this.countyCodeField;
            }
            set {
                this.countyCodeField = value;
            }
        }
        
        /// <remarks/>
        public string CountryCode {
            get {
                return this.countryCodeField;
            }
            set {
                this.countryCodeField = value;
            }
        }
        
        /// <remarks/>
        public string WardStatus {
            get {
                return this.wardStatusField;
            }
            set {
                this.wardStatusField = value;
            }
        }
        
        /// <remarks/>
        public string WardName {
            get {
                return this.wardNameField;
            }
            set {
                this.wardNameField = value;
            }
        }
        
        /// <remarks/>
        public string DistrictName {
            get {
                return this.districtNameField;
            }
            set {
                this.districtNameField = value;
            }
        }
        
        /// <remarks/>
        public bool Objective2 {
            get {
                return this.objective2Field;
            }
            set {
                this.objective2Field = value;
            }
        }
        
        /// <remarks/>
        public string Objective2Region {
            get {
                return this.objective2RegionField;
            }
            set {
                this.objective2RegionField = value;
            }
        }
        
        /// <remarks/>
        public bool Transitional {
            get {
                return this.transitionalField;
            }
            set {
                this.transitionalField = value;
            }
        }
        
        /// <remarks/>
        public double Longitude {
            get {
                return this.longitudeField;
            }
            set {
                this.longitudeField = value;
            }
        }
        
        /// <remarks/>
        public double Latitude {
            get {
                return this.latitudeField;
            }
            set {
                this.latitudeField = value;
            }
        }
        
        /// <remarks/>
        public string OSReference {
            get {
                return this.oSReferenceField;
            }
            set {
                this.oSReferenceField = value;
            }
        }
        
        /// <remarks/>
        public double WGS84Longitude {
            get {
                return this.wGS84LongitudeField;
            }
            set {
                this.wGS84LongitudeField = value;
            }
        }
        
        /// <remarks/>
        public double WGS84Latitude {
            get {
                return this.wGS84LatitudeField;
            }
            set {
                this.wGS84LatitudeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2053.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="PostcodeAnywhere2")]
    public partial class AddressRawData {
        
        private string deliveryPointSuffixField;
        
        private string checksumField;
        
        private string nameOrNumberField;
        
        private string subBuildingNameField;
        
        private string buildingNameField;
        
        private string buildingNumberField;
        
        private string thoroughfareNameField;
        
        private string thoroughfareDescriptorField;
        
        private string dependentThoroughfareNameField;
        
        private string dependentThoroughfareDescriptorField;
        
        private string doubleDependentLocalityField;
        
        private string dependentLocalityField;
        
        private string pOBoxNumberField;
        
        private string numberOfHouseholdsField;
        
        private string concatenationOperatorField;
        
        private string buildingNameOrNumberField;
        
        private string buildingFlatField;
        
        /// <remarks/>
        public string DeliveryPointSuffix {
            get {
                return this.deliveryPointSuffixField;
            }
            set {
                this.deliveryPointSuffixField = value;
            }
        }
        
        /// <remarks/>
        public string Checksum {
            get {
                return this.checksumField;
            }
            set {
                this.checksumField = value;
            }
        }
        
        /// <remarks/>
        public string NameOrNumber {
            get {
                return this.nameOrNumberField;
            }
            set {
                this.nameOrNumberField = value;
            }
        }
        
        /// <remarks/>
        public string SubBuildingName {
            get {
                return this.subBuildingNameField;
            }
            set {
                this.subBuildingNameField = value;
            }
        }
        
        /// <remarks/>
        public string BuildingName {
            get {
                return this.buildingNameField;
            }
            set {
                this.buildingNameField = value;
            }
        }
        
        /// <remarks/>
        public string BuildingNumber {
            get {
                return this.buildingNumberField;
            }
            set {
                this.buildingNumberField = value;
            }
        }
        
        /// <remarks/>
        public string ThoroughfareName {
            get {
                return this.thoroughfareNameField;
            }
            set {
                this.thoroughfareNameField = value;
            }
        }
        
        /// <remarks/>
        public string ThoroughfareDescriptor {
            get {
                return this.thoroughfareDescriptorField;
            }
            set {
                this.thoroughfareDescriptorField = value;
            }
        }
        
        /// <remarks/>
        public string DependentThoroughfareName {
            get {
                return this.dependentThoroughfareNameField;
            }
            set {
                this.dependentThoroughfareNameField = value;
            }
        }
        
        /// <remarks/>
        public string DependentThoroughfareDescriptor {
            get {
                return this.dependentThoroughfareDescriptorField;
            }
            set {
                this.dependentThoroughfareDescriptorField = value;
            }
        }
        
        /// <remarks/>
        public string DoubleDependentLocality {
            get {
                return this.doubleDependentLocalityField;
            }
            set {
                this.doubleDependentLocalityField = value;
            }
        }
        
        /// <remarks/>
        public string DependentLocality {
            get {
                return this.dependentLocalityField;
            }
            set {
                this.dependentLocalityField = value;
            }
        }
        
        /// <remarks/>
        public string POBoxNumber {
            get {
                return this.pOBoxNumberField;
            }
            set {
                this.pOBoxNumberField = value;
            }
        }
        
        /// <remarks/>
        public string NumberOfHouseholds {
            get {
                return this.numberOfHouseholdsField;
            }
            set {
                this.numberOfHouseholdsField = value;
            }
        }
        
        /// <remarks/>
        public string ConcatenationOperator {
            get {
                return this.concatenationOperatorField;
            }
            set {
                this.concatenationOperatorField = value;
            }
        }
        
        /// <remarks/>
        public string BuildingNameOrNumber {
            get {
                return this.buildingNameOrNumberField;
            }
            set {
                this.buildingNameOrNumberField = value;
            }
        }
        
        /// <remarks/>
        public string BuildingFlat {
            get {
                return this.buildingFlatField;
            }
            set {
                this.buildingFlatField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2053.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="PostcodeAnywhere2")]
    public partial class Address {
        
        private string idField;
        
        private string organisationNameField;
        
        private string departmentNameField;
        
        private string line1Field;
        
        private string line2Field;
        
        private string line3Field;
        
        private string line4Field;
        
        private string line5Field;
        
        private string postTownField;
        
        private string countyField;
        
        private string postcodeField;
        
        private string mailsortField;
        
        private string barcodeField;
        
        private bool isResidentialField;
        
        private bool isSmallOrganisationField;
        
        private bool isLargeOrganisationField;
        
        private AddressRawData rawDataField;
        
        private AddressGeographicData geographicDataField;
        
        /// <remarks/>
        public string Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string OrganisationName {
            get {
                return this.organisationNameField;
            }
            set {
                this.organisationNameField = value;
            }
        }
        
        /// <remarks/>
        public string DepartmentName {
            get {
                return this.departmentNameField;
            }
            set {
                this.departmentNameField = value;
            }
        }
        
        /// <remarks/>
        public string Line1 {
            get {
                return this.line1Field;
            }
            set {
                this.line1Field = value;
            }
        }
        
        /// <remarks/>
        public string Line2 {
            get {
                return this.line2Field;
            }
            set {
                this.line2Field = value;
            }
        }
        
        /// <remarks/>
        public string Line3 {
            get {
                return this.line3Field;
            }
            set {
                this.line3Field = value;
            }
        }
        
        /// <remarks/>
        public string Line4 {
            get {
                return this.line4Field;
            }
            set {
                this.line4Field = value;
            }
        }
        
        /// <remarks/>
        public string Line5 {
            get {
                return this.line5Field;
            }
            set {
                this.line5Field = value;
            }
        }
        
        /// <remarks/>
        public string PostTown {
            get {
                return this.postTownField;
            }
            set {
                this.postTownField = value;
            }
        }
        
        /// <remarks/>
        public string County {
            get {
                return this.countyField;
            }
            set {
                this.countyField = value;
            }
        }
        
        /// <remarks/>
        public string Postcode {
            get {
                return this.postcodeField;
            }
            set {
                this.postcodeField = value;
            }
        }
        
        /// <remarks/>
        public string Mailsort {
            get {
                return this.mailsortField;
            }
            set {
                this.mailsortField = value;
            }
        }
        
        /// <remarks/>
        public string Barcode {
            get {
                return this.barcodeField;
            }
            set {
                this.barcodeField = value;
            }
        }
        
        /// <remarks/>
        public bool IsResidential {
            get {
                return this.isResidentialField;
            }
            set {
                this.isResidentialField = value;
            }
        }
        
        /// <remarks/>
        public bool IsSmallOrganisation {
            get {
                return this.isSmallOrganisationField;
            }
            set {
                this.isSmallOrganisationField = value;
            }
        }
        
        /// <remarks/>
        public bool IsLargeOrganisation {
            get {
                return this.isLargeOrganisationField;
            }
            set {
                this.isLargeOrganisationField = value;
            }
        }
        
        /// <remarks/>
        public AddressRawData RawData {
            get {
                return this.rawDataField;
            }
            set {
                this.rawDataField = value;
            }
        }
        
        /// <remarks/>
        public AddressGeographicData GeographicData {
            get {
                return this.geographicDataField;
            }
            set {
                this.geographicDataField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2053.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="PostcodeAnywhere2")]
    public partial class AddressResults {
        
        private bool isErrorField;
        
        private int errorNumberField;
        
        private string errorMessageField;
        
        private Address[] resultsField;
        
        /// <remarks/>
        public bool IsError {
            get {
                return this.isErrorField;
            }
            set {
                this.isErrorField = value;
            }
        }
        
        /// <remarks/>
        public int ErrorNumber {
            get {
                return this.errorNumberField;
            }
            set {
                this.errorNumberField = value;
            }
        }
        
        /// <remarks/>
        public string ErrorMessage {
            get {
                return this.errorMessageField;
            }
            set {
                this.errorMessageField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public Address[] Results {
            get {
                return this.resultsField;
            }
            set {
                this.resultsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2053.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="PostcodeAnywhere2")]
    public partial class CombinedResults {
        
        private bool isErrorField;
        
        private int errorNumberField;
        
        private string errorMessageField;
        
        private enResultType resultTypeField;
        
        private InterimResults interimResultsField;
        
        private AddressResults addressResultsField;
        
        /// <remarks/>
        public bool IsError {
            get {
                return this.isErrorField;
            }
            set {
                this.isErrorField = value;
            }
        }
        
        /// <remarks/>
        public int ErrorNumber {
            get {
                return this.errorNumberField;
            }
            set {
                this.errorNumberField = value;
            }
        }
        
        /// <remarks/>
        public string ErrorMessage {
            get {
                return this.errorMessageField;
            }
            set {
                this.errorMessageField = value;
            }
        }
        
        /// <remarks/>
        public enResultType ResultType {
            get {
                return this.resultTypeField;
            }
            set {
                this.resultTypeField = value;
            }
        }
        
        /// <remarks/>
        public InterimResults InterimResults {
            get {
                return this.interimResultsField;
            }
            set {
                this.interimResultsField = value;
            }
        }
        
        /// <remarks/>
        public AddressResults AddressResults {
            get {
                return this.addressResultsField;
            }
            set {
                this.addressResultsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2053.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="PostcodeAnywhere2")]
    public enum enResultType {
        
        /// <remarks/>
        enResultTypeError,
        
        /// <remarks/>
        enResultTypeStreetList,
        
        /// <remarks/>
        enResultTypePropertyList,
        
        /// <remarks/>
        enResultTypeAddresses,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2053.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="PostcodeAnywhere2")]
    public enum enLanguage {
        
        /// <remarks/>
        enLanguageEnglish,
        
        /// <remarks/>
        enLanguageWelsh,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2053.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="PostcodeAnywhere2")]
    public enum enContentType {
        
        /// <remarks/>
        enContentStandardAddress,
        
        /// <remarks/>
        enContentExpandedAddress,
        
        /// <remarks/>
        enContentGeographicAddress,
        
        /// <remarks/>
        enContentGeographicOnly,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2053.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="PostcodeAnywhere2")]
    public enum enUnitType {
        
        /// <remarks/>
        enUnitTypeMiles,
        
        /// <remarks/>
        enUnitTypeMeters,
        
        /// <remarks/>
        enUnitTypeKilometers,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void ByPostcodeCompletedEventHandler(object sender, ByPostcodeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ByPostcodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ByPostcodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public InterimResults Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((InterimResults)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void ByPostcode_DataSetCompletedEventHandler(object sender, ByPostcode_DataSetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ByPostcode_DataSetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ByPostcode_DataSetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void ByPostcode_CombinedCompletedEventHandler(object sender, ByPostcode_CombinedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ByPostcode_CombinedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ByPostcode_CombinedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CombinedResults Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CombinedResults)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void ByOutcodeCompletedEventHandler(object sender, ByOutcodeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ByOutcodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ByOutcodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public InterimResults Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((InterimResults)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void ByOutcode_DataSetCompletedEventHandler(object sender, ByOutcode_DataSetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ByOutcode_DataSetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ByOutcode_DataSetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void ByOrganisationCompletedEventHandler(object sender, ByOrganisationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ByOrganisationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ByOrganisationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public InterimResults Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((InterimResults)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void ByOrganisation_DataSetCompletedEventHandler(object sender, ByOrganisation_DataSetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ByOrganisation_DataSetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ByOrganisation_DataSetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void ByOrganisation_CombinedCompletedEventHandler(object sender, ByOrganisation_CombinedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ByOrganisation_CombinedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ByOrganisation_CombinedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CombinedResults Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CombinedResults)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void ByStreetCompletedEventHandler(object sender, ByStreetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ByStreetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ByStreetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public InterimResults Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((InterimResults)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void ByStreet_DatasetCompletedEventHandler(object sender, ByStreet_DatasetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ByStreet_DatasetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ByStreet_DatasetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void ByStreet_CombinedCompletedEventHandler(object sender, ByStreet_CombinedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ByStreet_CombinedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ByStreet_CombinedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CombinedResults Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CombinedResults)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void ByBuildingCompletedEventHandler(object sender, ByBuildingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ByBuildingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ByBuildingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public InterimResults Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((InterimResults)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void ByBuilding_DatasetCompletedEventHandler(object sender, ByBuilding_DatasetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ByBuilding_DatasetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ByBuilding_DatasetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void ByBuilding_CombinedCompletedEventHandler(object sender, ByBuilding_CombinedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ByBuilding_CombinedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ByBuilding_CombinedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CombinedResults Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CombinedResults)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void ByStreetKeyCompletedEventHandler(object sender, ByStreetKeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ByStreetKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ByStreetKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public InterimResults Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((InterimResults)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void ByStreetKey_DataSetCompletedEventHandler(object sender, ByStreetKey_DataSetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ByStreetKey_DataSetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ByStreetKey_DataSetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void ByStreetKey_CombinedCompletedEventHandler(object sender, ByStreetKey_CombinedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ByStreetKey_CombinedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ByStreetKey_CombinedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CombinedResults Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CombinedResults)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void ByLocalityKeyCompletedEventHandler(object sender, ByLocalityKeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ByLocalityKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ByLocalityKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public InterimResults Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((InterimResults)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void ByLocalityKey_DataSetCompletedEventHandler(object sender, ByLocalityKey_DataSetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ByLocalityKey_DataSetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ByLocalityKey_DataSetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void FetchAddress_SimpleCompletedEventHandler(object sender, FetchAddress_SimpleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FetchAddress_SimpleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FetchAddress_SimpleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public AddressResults Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((AddressResults)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void FetchAddressCompletedEventHandler(object sender, FetchAddressCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FetchAddressCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FetchAddressCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public AddressResults Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((AddressResults)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void FastAddressCompletedEventHandler(object sender, FastAddressCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FastAddressCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FastAddressCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public AddressResults Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((AddressResults)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void FetchAddress_DataSetCompletedEventHandler(object sender, FetchAddress_DataSetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FetchAddress_DataSetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FetchAddress_DataSetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void FastAddress_DataSetCompletedEventHandler(object sender, FastAddress_DataSetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FastAddress_DataSetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FastAddress_DataSetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void DistanceCompletedEventHandler(object sender, DistanceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DistanceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DistanceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public double Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((double)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void NearestCompletedEventHandler(object sender, NearestCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class NearestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal NearestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public NearestResults Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((NearestResults)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void Nearest_DataSetCompletedEventHandler(object sender, Nearest_DataSetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Nearest_DataSetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Nearest_DataSetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void StoredNearestCompletedEventHandler(object sender, StoredNearestCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class StoredNearestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal StoredNearestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public NearestResults Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((NearestResults)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void StoredNearest_DataSetCompletedEventHandler(object sender, StoredNearest_DataSetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class StoredNearest_DataSetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal StoredNearest_DataSetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void NearestRadialCompletedEventHandler(object sender, NearestRadialCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class NearestRadialCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal NearestRadialCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public NearestResults Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((NearestResults)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void NearestRadial_DataSetCompletedEventHandler(object sender, NearestRadial_DataSetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class NearestRadial_DataSetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal NearestRadial_DataSetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void StoredNearestRadialCompletedEventHandler(object sender, StoredNearestRadialCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class StoredNearestRadialCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal StoredNearestRadialCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public NearestResults Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((NearestResults)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void StoredNearestRadial_DataSetCompletedEventHandler(object sender, StoredNearestRadial_DataSetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class StoredNearestRadial_DataSetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal StoredNearestRadial_DataSetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void ChangesCompletedEventHandler(object sender, ChangesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ChangesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ChangesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ChangesResults Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ChangesResults)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void Changes_DataSetCompletedEventHandler(object sender, Changes_DataSetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Changes_DataSetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Changes_DataSetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void CleanseCompletedEventHandler(object sender, CleanseCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CleanseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CleanseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CleanseResults Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CleanseResults)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void Cleanse_DataSetCompletedEventHandler(object sender, Cleanse_DataSetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Cleanse_DataSetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Cleanse_DataSetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591